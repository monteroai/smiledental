{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./differenceInCalendarDays.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":73,"index":132}}],"key":"imq/EGPR6TLwAkGUJvGZSPH1SeI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.differenceInDays = differenceInDays;\n  var _normalizeDates = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  var _differenceInCalendarDays = require(_dependencyMap[1], \"./differenceInCalendarDays.js\");\n  /**\n   * The {@link differenceInDays} function options.\n   */\n\n  /**\n   * @name differenceInDays\n   * @category Day Helpers\n   * @summary Get the number of full days between the given dates.\n   *\n   * @description\n   * Get the number of full day periods between two dates. Fractional days are\n   * truncated towards zero.\n   *\n   * One \"full day\" is the distance between a local time in one day to the same\n   * local time on the next or previous day. A full day can sometimes be less than\n   * or more than 24 hours if a daylight savings change happens between two dates.\n   *\n   * To ignore DST and only measure exact 24-hour periods, use this instead:\n   * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n   *\n   * @param laterDate - The later date\n   * @param earlierDate - The earlier date\n   * @param options - An object with options\n   *\n   * @returns The number of full days according to the local timezone\n   *\n   * @example\n   * // How many full days are between\n   * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n   * const result = differenceInDays(\n   *   new Date(2012, 6, 2, 0, 0),\n   *   new Date(2011, 6, 2, 23, 0)\n   * )\n   * //=> 365\n   *\n   * @example\n   * // How many full days are between\n   * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n   * const result = differenceInDays(\n   *   new Date(2011, 6, 3, 0, 1),\n   *   new Date(2011, 6, 2, 23, 59)\n   * )\n   * //=> 0\n   *\n   * @example\n   * // How many full days are between\n   * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n   * // Note: because local time is used, the\n   * // result will always be 92 days, even in\n   * // time zones where DST starts and the\n   * // period has only 92*24-1 hours.\n   * const result = differenceInDays(\n   *   new Date(2020, 5, 1),\n   *   new Date(2020, 2, 1)\n   * )\n   * //=> 92\n   */\n  function differenceInDays(laterDate, earlierDate, options) {\n    const [laterDate_, earlierDate_] = (0, _normalizeDates.normalizeDates)(options?.in, laterDate, earlierDate);\n    const sign = compareLocalAsc(laterDate_, earlierDate_);\n    const difference = Math.abs((0, _differenceInCalendarDays.differenceInCalendarDays)(laterDate_, earlierDate_));\n    laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n    // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n    // If so, result must be decreased by 1 in absolute value\n    const isLastDayNotFull = Number(compareLocalAsc(laterDate_, earlierDate_) === -sign);\n    const result = sign * (difference - isLastDayNotFull);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  }\n\n  // Like `compareAsc` but uses local time not UTC, which is needed\n  // for accurate equality comparisons of UTC timestamps that end up\n  // having the same representation in local time, e.g. one hour before\n  // DST ends vs. the instant that DST ends.\n  function compareLocalAsc(laterDate, earlierDate) {\n    const diff = laterDate.getFullYear() - earlierDate.getFullYear() || laterDate.getMonth() - earlierDate.getMonth() || laterDate.getDate() - earlierDate.getDate() || laterDate.getHours() - earlierDate.getHours() || laterDate.getMinutes() - earlierDate.getMinutes() || laterDate.getSeconds() - earlierDate.getSeconds() || laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n    if (diff < 0) return -1;\n    if (diff > 0) return 1;\n\n    // Return 0 if diff is 0; return NaN if diff is NaN\n    return diff;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = differenceInDays;\n});","lineCount":95,"map":[[7,2,1,0],[7,6,1,0,"_normalizeDates"],[7,21,1,0],[7,24,1,0,"require"],[7,31,1,0],[7,32,1,0,"_dependencyMap"],[7,46,1,0],[8,2,2,0],[8,6,2,0,"_differenceInCalendarDays"],[8,31,2,0],[8,34,2,0,"require"],[8,41,2,0],[8,42,2,0,"_dependencyMap"],[8,56,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,0,59,0],[65,0,60,0],[66,2,61,7],[66,11,61,16,"differenceInDays"],[66,27,61,32,"differenceInDays"],[66,28,61,33,"laterDate"],[66,37,61,42],[66,39,61,44,"earlierDate"],[66,50,61,55],[66,52,61,57,"options"],[66,59,61,64],[66,61,61,66],[67,4,62,2],[67,10,62,8],[67,11,62,9,"laterDate_"],[67,21,62,19],[67,23,62,21,"earlierDate_"],[67,35,62,33],[67,36,62,34],[67,39,62,37],[67,43,62,37,"normalizeDates"],[67,73,62,51],[67,75,63,4,"options"],[67,82,63,11],[67,84,63,13,"in"],[67,86,63,15],[67,88,64,4,"laterDate"],[67,97,64,13],[67,99,65,4,"earlierDate"],[67,110,66,2],[67,111,66,3],[68,4,68,2],[68,10,68,8,"sign"],[68,14,68,12],[68,17,68,15,"compareLocalAsc"],[68,32,68,30],[68,33,68,31,"laterDate_"],[68,43,68,41],[68,45,68,43,"earlierDate_"],[68,57,68,55],[68,58,68,56],[69,4,69,2],[69,10,69,8,"difference"],[69,20,69,18],[69,23,69,21,"Math"],[69,27,69,25],[69,28,69,26,"abs"],[69,31,69,29],[69,32,70,4],[69,36,70,4,"differenceInCalendarDays"],[69,86,70,28],[69,88,70,29,"laterDate_"],[69,98,70,39],[69,100,70,41,"earlierDate_"],[69,112,70,53],[69,113,71,2],[69,114,71,3],[70,4,73,2,"laterDate_"],[70,14,73,12],[70,15,73,13,"setDate"],[70,22,73,20],[70,23,73,21,"laterDate_"],[70,33,73,31],[70,34,73,32,"getDate"],[70,41,73,39],[70,42,73,40],[70,43,73,41],[70,46,73,44,"sign"],[70,50,73,48],[70,53,73,51,"difference"],[70,63,73,61],[70,64,73,62],[72,4,75,2],[73,4,76,2],[74,4,77,2],[74,10,77,8,"isLastDayNotFull"],[74,26,77,24],[74,29,77,27,"Number"],[74,35,77,33],[74,36,78,4,"compareLocalAsc"],[74,51,78,19],[74,52,78,20,"laterDate_"],[74,62,78,30],[74,64,78,32,"earlierDate_"],[74,76,78,44],[74,77,78,45],[74,82,78,50],[74,83,78,51,"sign"],[74,87,79,2],[74,88,79,3],[75,4,81,2],[75,10,81,8,"result"],[75,16,81,14],[75,19,81,17,"sign"],[75,23,81,21],[75,27,81,25,"difference"],[75,37,81,35],[75,40,81,38,"isLastDayNotFull"],[75,56,81,54],[75,57,81,55],[76,4,82,2],[77,4,83,2],[77,11,83,9,"result"],[77,17,83,15],[77,22,83,20],[77,23,83,21],[77,26,83,24],[77,27,83,25],[77,30,83,28,"result"],[77,36,83,34],[78,2,84,0],[80,2,86,0],[81,2,87,0],[82,2,88,0],[83,2,89,0],[84,2,90,0],[84,11,90,9,"compareLocalAsc"],[84,26,90,24,"compareLocalAsc"],[84,27,90,25,"laterDate"],[84,36,90,34],[84,38,90,36,"earlierDate"],[84,49,90,47],[84,51,90,49],[85,4,91,2],[85,10,91,8,"diff"],[85,14,91,12],[85,17,92,4,"laterDate"],[85,26,92,13],[85,27,92,14,"getFullYear"],[85,38,92,25],[85,39,92,26],[85,40,92,27],[85,43,92,30,"earlierDate"],[85,54,92,41],[85,55,92,42,"getFullYear"],[85,66,92,53],[85,67,92,54],[85,68,92,55],[85,72,93,4,"laterDate"],[85,81,93,13],[85,82,93,14,"getMonth"],[85,90,93,22],[85,91,93,23],[85,92,93,24],[85,95,93,27,"earlierDate"],[85,106,93,38],[85,107,93,39,"getMonth"],[85,115,93,47],[85,116,93,48],[85,117,93,49],[85,121,94,4,"laterDate"],[85,130,94,13],[85,131,94,14,"getDate"],[85,138,94,21],[85,139,94,22],[85,140,94,23],[85,143,94,26,"earlierDate"],[85,154,94,37],[85,155,94,38,"getDate"],[85,162,94,45],[85,163,94,46],[85,164,94,47],[85,168,95,4,"laterDate"],[85,177,95,13],[85,178,95,14,"getHours"],[85,186,95,22],[85,187,95,23],[85,188,95,24],[85,191,95,27,"earlierDate"],[85,202,95,38],[85,203,95,39,"getHours"],[85,211,95,47],[85,212,95,48],[85,213,95,49],[85,217,96,4,"laterDate"],[85,226,96,13],[85,227,96,14,"getMinutes"],[85,237,96,24],[85,238,96,25],[85,239,96,26],[85,242,96,29,"earlierDate"],[85,253,96,40],[85,254,96,41,"getMinutes"],[85,264,96,51],[85,265,96,52],[85,266,96,53],[85,270,97,4,"laterDate"],[85,279,97,13],[85,280,97,14,"getSeconds"],[85,290,97,24],[85,291,97,25],[85,292,97,26],[85,295,97,29,"earlierDate"],[85,306,97,40],[85,307,97,41,"getSeconds"],[85,317,97,51],[85,318,97,52],[85,319,97,53],[85,323,98,4,"laterDate"],[85,332,98,13],[85,333,98,14,"getMilliseconds"],[85,348,98,29],[85,349,98,30],[85,350,98,31],[85,353,98,34,"earlierDate"],[85,364,98,45],[85,365,98,46,"getMilliseconds"],[85,380,98,61],[85,381,98,62],[85,382,98,63],[86,4,100,2],[86,8,100,6,"diff"],[86,12,100,10],[86,15,100,13],[86,16,100,14],[86,18,100,16],[86,25,100,23],[86,26,100,24],[86,27,100,25],[87,4,101,2],[87,8,101,6,"diff"],[87,12,101,10],[87,15,101,13],[87,16,101,14],[87,18,101,16],[87,25,101,23],[87,26,101,24],[89,4,103,2],[90,4,104,2],[90,11,104,9,"diff"],[90,15,104,13],[91,2,105,0],[93,2,107,0],[94,2,107,0],[94,6,107,0,"_default"],[94,14,107,0],[94,17,107,0,"exports"],[94,24,107,0],[94,25,107,0,"default"],[94,32,107,0],[94,35,108,15,"differenceInDays"],[94,51,108,31],[95,0,108,31],[95,3]],"functionMap":{"names":["<global>","differenceInDays","compareLocalAsc"],"mappings":"AAA;OC4D;CDuB;AEM;CFe"}},"type":"js/module"}]}