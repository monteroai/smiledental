{"dependencies":[{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.milliseconds = milliseconds;\n  var _constants = require(_dependencyMap[0], \"./constants.js\");\n  /**\n   * @name milliseconds\n   * @category Millisecond Helpers\n   * @summary\n   * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n   *\n   * @description\n   * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n   *\n   * One years equals 365.2425 days according to the formula:\n   *\n   * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n   * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n   *\n   * One month is a year divided by 12.\n   *\n   * @param duration - The object with years, months, weeks, days, hours, minutes and seconds to be added.\n   *\n   * @returns The milliseconds\n   *\n   * @example\n   * // 1 year in milliseconds\n   * milliseconds({ years: 1 })\n   * //=> 31556952000\n   *\n   * // 3 months in milliseconds\n   * milliseconds({ months: 3 })\n   * //=> 7889238000\n   */\n  function milliseconds({\n    years,\n    months,\n    weeks,\n    days,\n    hours,\n    minutes,\n    seconds\n  }) {\n    let totalDays = 0;\n    if (years) totalDays += years * _constants.daysInYear;\n    if (months) totalDays += months * (_constants.daysInYear / 12);\n    if (weeks) totalDays += weeks * 7;\n    if (days) totalDays += days;\n    let totalSeconds = totalDays * 24 * 60 * 60;\n    if (hours) totalSeconds += hours * 60 * 60;\n    if (minutes) totalSeconds += minutes * 60;\n    if (seconds) totalSeconds += seconds;\n    return Math.trunc(totalSeconds * 1000);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = milliseconds;\n});","lineCount":60,"map":[[7,2,1,0],[7,6,1,0,"_constants"],[7,16,1,0],[7,19,1,0,"require"],[7,26,1,0],[7,27,1,0,"_dependencyMap"],[7,41,1,0],[8,2,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,2,32,7],[37,11,32,16,"milliseconds"],[37,23,32,28,"milliseconds"],[37,24,32,29],[38,4,33,2,"years"],[38,9,33,7],[39,4,34,2,"months"],[39,10,34,8],[40,4,35,2,"weeks"],[40,9,35,7],[41,4,36,2,"days"],[41,8,36,6],[42,4,37,2,"hours"],[42,9,37,7],[43,4,38,2,"minutes"],[43,11,38,9],[44,4,39,2,"seconds"],[45,2,40,0],[45,3,40,1],[45,5,40,3],[46,4,41,2],[46,8,41,6,"totalDays"],[46,17,41,15],[46,20,41,18],[46,21,41,19],[47,4,43,2],[47,8,43,6,"years"],[47,13,43,11],[47,15,43,13,"totalDays"],[47,24,43,22],[47,28,43,26,"years"],[47,33,43,31],[47,36,43,34,"daysInYear"],[47,57,43,44],[48,4,44,2],[48,8,44,6,"months"],[48,14,44,12],[48,16,44,14,"totalDays"],[48,25,44,23],[48,29,44,27,"months"],[48,35,44,33],[48,39,44,37,"daysInYear"],[48,60,44,47],[48,63,44,50],[48,65,44,52],[48,66,44,53],[49,4,45,2],[49,8,45,6,"weeks"],[49,13,45,11],[49,15,45,13,"totalDays"],[49,24,45,22],[49,28,45,26,"weeks"],[49,33,45,31],[49,36,45,34],[49,37,45,35],[50,4,46,2],[50,8,46,6,"days"],[50,12,46,10],[50,14,46,12,"totalDays"],[50,23,46,21],[50,27,46,25,"days"],[50,31,46,29],[51,4,48,2],[51,8,48,6,"totalSeconds"],[51,20,48,18],[51,23,48,21,"totalDays"],[51,32,48,30],[51,35,48,33],[51,37,48,35],[51,40,48,38],[51,42,48,40],[51,45,48,43],[51,47,48,45],[52,4,50,2],[52,8,50,6,"hours"],[52,13,50,11],[52,15,50,13,"totalSeconds"],[52,27,50,25],[52,31,50,29,"hours"],[52,36,50,34],[52,39,50,37],[52,41,50,39],[52,44,50,42],[52,46,50,44],[53,4,51,2],[53,8,51,6,"minutes"],[53,15,51,13],[53,17,51,15,"totalSeconds"],[53,29,51,27],[53,33,51,31,"minutes"],[53,40,51,38],[53,43,51,41],[53,45,51,43],[54,4,52,2],[54,8,52,6,"seconds"],[54,15,52,13],[54,17,52,15,"totalSeconds"],[54,29,52,27],[54,33,52,31,"seconds"],[54,40,52,38],[55,4,54,2],[55,11,54,9,"Math"],[55,15,54,13],[55,16,54,14,"trunc"],[55,21,54,19],[55,22,54,20,"totalSeconds"],[55,34,54,32],[55,37,54,35],[55,41,54,39],[55,42,54,40],[56,2,55,0],[58,2,57,0],[59,2,57,0],[59,6,57,0,"_default"],[59,14,57,0],[59,17,57,0,"exports"],[59,24,57,0],[59,25,57,0,"default"],[59,32,57,0],[59,35,58,15,"milliseconds"],[59,47,58,27],[60,0,58,27],[60,3]],"functionMap":{"names":["<global>","milliseconds"],"mappings":"AAA;OC+B;CDuB"}},"type":"js/module"}]}