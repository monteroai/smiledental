{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachHourOfInterval = eachHourOfInterval;\n  var _normalizeInterval = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _constructFrom = require(_dependencyMap[1], \"./constructFrom.js\");\n  /**\n   * The {@link eachHourOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachHourOfInterval} function result type.\n   * Resolves to the appropriate date type based on inputs.\n   */\n\n  /**\n   * @name eachHourOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of hours within the specified time interval.\n   *\n   * @description\n   * Return the array of hours within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval.\n   * @param options - An object with options.\n   *\n   * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\n   *\n   * @example\n   * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n   * const result = eachHourOfInterval({\n   *   start: new Date(2014, 9, 6, 12),\n   *   end: new Date(2014, 9, 6, 15)\n   * });\n   * //=> [\n   * //   Mon Oct 06 2014 12:00:00,\n   * //   Mon Oct 06 2014 13:00:00,\n   * //   Mon Oct 06 2014 14:00:00,\n   * //   Mon Oct 06 2014 15:00:00\n   * // ]\n   */\n  function eachHourOfInterval(interval, options) {\n    const {\n      start,\n      end\n    } = (0, _normalizeInterval.normalizeInterval)(options?.in, interval);\n    let reversed = +start > +end;\n    const endTime = reversed ? +start : +end;\n    const date = reversed ? end : start;\n    date.setMinutes(0, 0, 0);\n    let step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    const dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _constructFrom.constructFrom)(start, date));\n      date.setHours(date.getHours() + step);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachHourOfInterval;\n});","lineCount":72,"map":[[7,2,1,0],[7,6,1,0,"_normalizeInterval"],[7,24,1,0],[7,27,1,0,"require"],[7,34,1,0],[7,35,1,0,"_dependencyMap"],[7,49,1,0],[8,2,2,0],[8,6,2,0,"_constructFrom"],[8,20,2,0],[8,23,2,0,"require"],[8,30,2,0],[8,31,2,0,"_dependencyMap"],[8,45,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[18,2,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,2,42,7],[47,11,42,16,"eachHourOfInterval"],[47,29,42,34,"eachHourOfInterval"],[47,30,42,35,"interval"],[47,38,42,43],[47,40,42,45,"options"],[47,47,42,52],[47,49,42,54],[48,4,43,2],[48,10,43,8],[49,6,43,10,"start"],[49,11,43,15],[50,6,43,17,"end"],[51,4,43,21],[51,5,43,22],[51,8,43,25],[51,12,43,25,"normalizeInterval"],[51,48,43,42],[51,50,43,43,"options"],[51,57,43,50],[51,59,43,52,"in"],[51,61,43,54],[51,63,43,56,"interval"],[51,71,43,64],[51,72,43,65],[52,4,45,2],[52,8,45,6,"reversed"],[52,16,45,14],[52,19,45,17],[52,20,45,18,"start"],[52,25,45,23],[52,28,45,26],[52,29,45,27,"end"],[52,32,45,30],[53,4,46,2],[53,10,46,8,"endTime"],[53,17,46,15],[53,20,46,18,"reversed"],[53,28,46,26],[53,31,46,29],[53,32,46,30,"start"],[53,37,46,35],[53,40,46,38],[53,41,46,39,"end"],[53,44,46,42],[54,4,47,2],[54,10,47,8,"date"],[54,14,47,12],[54,17,47,15,"reversed"],[54,25,47,23],[54,28,47,26,"end"],[54,31,47,29],[54,34,47,32,"start"],[54,39,47,37],[55,4,48,2,"date"],[55,8,48,6],[55,9,48,7,"setMinutes"],[55,19,48,17],[55,20,48,18],[55,21,48,19],[55,23,48,21],[55,24,48,22],[55,26,48,24],[55,27,48,25],[55,28,48,26],[56,4,50,2],[56,8,50,6,"step"],[56,12,50,10],[56,15,50,13,"options"],[56,22,50,20],[56,24,50,22,"step"],[56,28,50,26],[56,32,50,30],[56,33,50,31],[57,4,51,2],[57,8,51,6],[57,9,51,7,"step"],[57,13,51,11],[57,15,51,13],[57,22,51,20],[57,24,51,22],[58,4,52,2],[58,8,52,6,"step"],[58,12,52,10],[58,15,52,13],[58,16,52,14],[58,18,52,16],[59,6,53,4,"step"],[59,10,53,8],[59,13,53,11],[59,14,53,12,"step"],[59,18,53,16],[60,6,54,4,"reversed"],[60,14,54,12],[60,17,54,15],[60,18,54,16,"reversed"],[60,26,54,24],[61,4,55,2],[62,4,57,2],[62,10,57,8,"dates"],[62,15,57,13],[62,18,57,16],[62,20,57,18],[63,4,59,2],[63,11,59,9],[63,12,59,10,"date"],[63,16,59,14],[63,20,59,18,"endTime"],[63,27,59,25],[63,29,59,27],[64,6,60,4,"dates"],[64,11,60,9],[64,12,60,10,"push"],[64,16,60,14],[64,17,60,15],[64,21,60,15,"constructFrom"],[64,49,60,28],[64,51,60,29,"start"],[64,56,60,34],[64,58,60,36,"date"],[64,62,60,40],[64,63,60,41],[64,64,60,42],[65,6,61,4,"date"],[65,10,61,8],[65,11,61,9,"setHours"],[65,19,61,17],[65,20,61,18,"date"],[65,24,61,22],[65,25,61,23,"getHours"],[65,33,61,31],[65,34,61,32],[65,35,61,33],[65,38,61,36,"step"],[65,42,61,40],[65,43,61,41],[66,4,62,2],[67,4,64,2],[67,11,64,9,"reversed"],[67,19,64,17],[67,22,64,20,"dates"],[67,27,64,25],[67,28,64,26,"reverse"],[67,35,64,33],[67,36,64,34],[67,37,64,35],[67,40,64,38,"dates"],[67,45,64,43],[68,2,65,0],[70,2,67,0],[71,2,67,0],[71,6,67,0,"_default"],[71,14,67,0],[71,17,67,0,"exports"],[71,24,67,0],[71,25,67,0,"default"],[71,32,67,0],[71,35,68,15,"eachHourOfInterval"],[71,53,68,33],[72,0,68,33],[72,3]],"functionMap":{"names":["<global>","eachHourOfInterval"],"mappings":"AAA;OCyC;CDuB"}},"type":"js/module"}]}