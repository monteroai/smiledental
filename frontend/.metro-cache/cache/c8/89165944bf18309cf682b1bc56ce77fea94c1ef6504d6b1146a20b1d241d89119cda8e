{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./max.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":31,"index":90}}],"key":"/ig9kvdgCUKfntz07z+RRKdvFCY=","exportNames":["*"]}},{"name":"./min.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":91},"end":{"line":3,"column":31,"index":122}}],"key":"IaiS1NqD3bj2r8kvzJAuj5V7ZVA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.clamp = clamp;\n  exports.default = void 0;\n  var _normalizeDates = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  var _max = require(_dependencyMap[1], \"./max.js\");\n  var _min = require(_dependencyMap[2], \"./min.js\");\n  /**\n   * The {@link clamp} function options.\n   */\n\n  /**\n   * The {@link clamp} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name clamp\n   * @category Interval Helpers\n   * @summary Return a date bounded by the start and the end of the given interval.\n   *\n   * @description\n   * Clamps a date to the lower bound with the start of the interval and the upper\n   * bound with the end of the interval.\n   *\n   * - When the date is less than the start of the interval, the start is returned.\n   * - When the date is greater than the end of the interval, the end is returned.\n   * - Otherwise the date is returned.\n   *\n   * @typeParam DateType - Date argument type.\n   * @typeParam IntervalType - Interval argument type.\n   * @typeParam Options - Options type.\n   *\n   * @param date - The date to be bounded\n   * @param interval - The interval to bound to\n   * @param options - An object with options\n   *\n   * @returns The date bounded by the start and the end of the interval\n   *\n   * @example\n   * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021\n   * const result = clamp(new Date(2021, 2, 21), {\n   *   start: new Date(2021, 2, 22),\n   *   end: new Date(2021, 3, 1),\n   * })\n   * //=> Mon Mar 22 2021 00:00:00\n   */\n  function clamp(date, interval, options) {\n    const [date_, start, end] = (0, _normalizeDates.normalizeDates)(options?.in, date, interval.start, interval.end);\n    return (0, _min.min)([(0, _max.max)([date_, start], options), end], options);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = clamp;\n});","lineCount":59,"map":[[7,2,1,0],[7,6,1,0,"_normalizeDates"],[7,21,1,0],[7,24,1,0,"require"],[7,31,1,0],[7,32,1,0,"_dependencyMap"],[7,46,1,0],[8,2,2,0],[8,6,2,0,"_max"],[8,10,2,0],[8,13,2,0,"require"],[8,20,2,0],[8,21,2,0,"_dependencyMap"],[8,35,2,0],[9,2,3,0],[9,6,3,0,"_min"],[9,10,3,0],[9,13,3,0,"require"],[9,20,3,0],[9,21,3,0,"_dependencyMap"],[9,35,3,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[14,2,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[21,2,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,2,47,7],[52,11,47,16,"clamp"],[52,16,47,21,"clamp"],[52,17,47,22,"date"],[52,21,47,26],[52,23,47,28,"interval"],[52,31,47,36],[52,33,47,38,"options"],[52,40,47,45],[52,42,47,47],[53,4,48,2],[53,10,48,8],[53,11,48,9,"date_"],[53,16,48,14],[53,18,48,16,"start"],[53,23,48,21],[53,25,48,23,"end"],[53,28,48,26],[53,29,48,27],[53,32,48,30],[53,36,48,30,"normalizeDates"],[53,66,48,44],[53,68,49,4,"options"],[53,75,49,11],[53,77,49,13,"in"],[53,79,49,15],[53,81,50,4,"date"],[53,85,50,8],[53,87,51,4,"interval"],[53,95,51,12],[53,96,51,13,"start"],[53,101,51,18],[53,103,52,4,"interval"],[53,111,52,12],[53,112,52,13,"end"],[53,115,53,2],[53,116,53,3],[54,4,55,2],[54,11,55,9],[54,15,55,9,"min"],[54,23,55,12],[54,25,55,13],[54,26,55,14],[54,30,55,14,"max"],[54,38,55,17],[54,40,55,18],[54,41,55,19,"date_"],[54,46,55,24],[54,48,55,26,"start"],[54,53,55,31],[54,54,55,32],[54,56,55,34,"options"],[54,63,55,41],[54,64,55,42],[54,66,55,44,"end"],[54,69,55,47],[54,70,55,48],[54,72,55,50,"options"],[54,79,55,57],[54,80,55,58],[55,2,56,0],[57,2,58,0],[58,2,58,0],[58,6,58,0,"_default"],[58,14,58,0],[58,17,58,0,"exports"],[58,24,58,0],[58,25,58,0,"default"],[58,32,58,0],[58,35,59,15,"clamp"],[58,40,59,20],[59,0,59,20],[59,3]],"functionMap":{"names":["<global>","clamp"],"mappings":"AAA;OC8C;CDS"}},"type":"js/module"}]}