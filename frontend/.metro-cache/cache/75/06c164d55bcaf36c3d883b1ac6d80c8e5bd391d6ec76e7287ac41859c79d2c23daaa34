{"dependencies":[{"name":"./_lib/addLeadingZeros.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}}],"key":"nr19Y2AxEUlGdF0WaI8ULOMy6Cc=","exportNames":["*"]}},{"name":"./isValid.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":61},"end":{"line":2,"column":39,"index":100}}],"key":"Sst1buy9uBfV7bjRtTAEggSwFYs=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":101},"end":{"line":3,"column":37,"index":138}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.formatRFC3339 = formatRFC3339;\n  var _addLeadingZeros = require(_dependencyMap[0], \"./_lib/addLeadingZeros.js\");\n  var _isValid = require(_dependencyMap[1], \"./isValid.js\");\n  var _toDate = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * The {@link formatRFC3339} function options.\n   */\n\n  /**\n   * @name formatRFC3339\n   * @category Common Helpers\n   * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n   *\n   * @description\n   * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n   *\n   * @param date - The original date\n   * @param options - An object with options.\n   *\n   * @returns The formatted date string\n   *\n   * @throws `date` must not be Invalid Date\n   *\n   * @example\n   * // Represent 18 September 2019 in RFC 3339 format:\n   * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n   * //=> '2019-09-18T19:00:52Z'\n   *\n   * @example\n   * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n   * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {\n   *   fractionDigits: 3\n   * })\n   * //=> '2019-09-18T19:00:52.234Z'\n   */\n  function formatRFC3339(date, options) {\n    const date_ = (0, _toDate.toDate)(date, options?.in);\n    if (!(0, _isValid.isValid)(date_)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    const fractionDigits = options?.fractionDigits ?? 0;\n    const day = (0, _addLeadingZeros.addLeadingZeros)(date_.getDate(), 2);\n    const month = (0, _addLeadingZeros.addLeadingZeros)(date_.getMonth() + 1, 2);\n    const year = date_.getFullYear();\n    const hour = (0, _addLeadingZeros.addLeadingZeros)(date_.getHours(), 2);\n    const minute = (0, _addLeadingZeros.addLeadingZeros)(date_.getMinutes(), 2);\n    const second = (0, _addLeadingZeros.addLeadingZeros)(date_.getSeconds(), 2);\n    let fractionalSecond = \"\";\n    if (fractionDigits > 0) {\n      const milliseconds = date_.getMilliseconds();\n      const fractionalSeconds = Math.trunc(milliseconds * Math.pow(10, fractionDigits - 3));\n      fractionalSecond = \".\" + (0, _addLeadingZeros.addLeadingZeros)(fractionalSeconds, fractionDigits);\n    }\n    let offset = \"\";\n    const tzOffset = date_.getTimezoneOffset();\n    if (tzOffset !== 0) {\n      const absoluteOffset = Math.abs(tzOffset);\n      const hourOffset = (0, _addLeadingZeros.addLeadingZeros)(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = (0, _addLeadingZeros.addLeadingZeros)(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = tzOffset < 0 ? \"+\" : \"-\";\n      offset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      offset = \"Z\";\n    }\n    return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = formatRFC3339;\n});","lineCount":76,"map":[[7,2,1,0],[7,6,1,0,"_addLeadingZeros"],[7,22,1,0],[7,25,1,0,"require"],[7,32,1,0],[7,33,1,0,"_dependencyMap"],[7,47,1,0],[8,2,2,0],[8,6,2,0,"_isValid"],[8,14,2,0],[8,17,2,0,"require"],[8,24,2,0],[8,25,2,0,"_dependencyMap"],[8,39,2,0],[9,2,3,0],[9,6,3,0,"_toDate"],[9,13,3,0],[9,16,3,0,"require"],[9,23,3,0],[9,24,3,0,"_dependencyMap"],[9,38,3,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[14,2,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,2,36,7],[41,11,36,16,"formatRFC3339"],[41,24,36,29,"formatRFC3339"],[41,25,36,30,"date"],[41,29,36,34],[41,31,36,36,"options"],[41,38,36,43],[41,40,36,45],[42,4,37,2],[42,10,37,8,"date_"],[42,15,37,13],[42,18,37,16],[42,22,37,16,"toDate"],[42,36,37,22],[42,38,37,23,"date"],[42,42,37,27],[42,44,37,29,"options"],[42,51,37,36],[42,53,37,38,"in"],[42,55,37,40],[42,56,37,41],[43,4,39,2],[43,8,39,6],[43,9,39,7],[43,13,39,7,"isValid"],[43,29,39,14],[43,31,39,15,"date_"],[43,36,39,20],[43,37,39,21],[43,39,39,23],[44,6,40,4],[44,12,40,10],[44,16,40,14,"RangeError"],[44,26,40,24],[44,27,40,25],[44,47,40,45],[44,48,40,46],[45,4,41,2],[46,4,43,2],[46,10,43,8,"fractionDigits"],[46,24,43,22],[46,27,43,25,"options"],[46,34,43,32],[46,36,43,34,"fractionDigits"],[46,50,43,48],[46,54,43,52],[46,55,43,53],[47,4,45,2],[47,10,45,8,"day"],[47,13,45,11],[47,16,45,14],[47,20,45,14,"addLeadingZeros"],[47,52,45,29],[47,54,45,30,"date_"],[47,59,45,35],[47,60,45,36,"getDate"],[47,67,45,43],[47,68,45,44],[47,69,45,45],[47,71,45,47],[47,72,45,48],[47,73,45,49],[48,4,46,2],[48,10,46,8,"month"],[48,15,46,13],[48,18,46,16],[48,22,46,16,"addLeadingZeros"],[48,54,46,31],[48,56,46,32,"date_"],[48,61,46,37],[48,62,46,38,"getMonth"],[48,70,46,46],[48,71,46,47],[48,72,46,48],[48,75,46,51],[48,76,46,52],[48,78,46,54],[48,79,46,55],[48,80,46,56],[49,4,47,2],[49,10,47,8,"year"],[49,14,47,12],[49,17,47,15,"date_"],[49,22,47,20],[49,23,47,21,"getFullYear"],[49,34,47,32],[49,35,47,33],[49,36,47,34],[50,4,49,2],[50,10,49,8,"hour"],[50,14,49,12],[50,17,49,15],[50,21,49,15,"addLeadingZeros"],[50,53,49,30],[50,55,49,31,"date_"],[50,60,49,36],[50,61,49,37,"getHours"],[50,69,49,45],[50,70,49,46],[50,71,49,47],[50,73,49,49],[50,74,49,50],[50,75,49,51],[51,4,50,2],[51,10,50,8,"minute"],[51,16,50,14],[51,19,50,17],[51,23,50,17,"addLeadingZeros"],[51,55,50,32],[51,57,50,33,"date_"],[51,62,50,38],[51,63,50,39,"getMinutes"],[51,73,50,49],[51,74,50,50],[51,75,50,51],[51,77,50,53],[51,78,50,54],[51,79,50,55],[52,4,51,2],[52,10,51,8,"second"],[52,16,51,14],[52,19,51,17],[52,23,51,17,"addLeadingZeros"],[52,55,51,32],[52,57,51,33,"date_"],[52,62,51,38],[52,63,51,39,"getSeconds"],[52,73,51,49],[52,74,51,50],[52,75,51,51],[52,77,51,53],[52,78,51,54],[52,79,51,55],[53,4,53,2],[53,8,53,6,"fractionalSecond"],[53,24,53,22],[53,27,53,25],[53,29,53,27],[54,4,54,2],[54,8,54,6,"fractionDigits"],[54,22,54,20],[54,25,54,23],[54,26,54,24],[54,28,54,26],[55,6,55,4],[55,12,55,10,"milliseconds"],[55,24,55,22],[55,27,55,25,"date_"],[55,32,55,30],[55,33,55,31,"getMilliseconds"],[55,48,55,46],[55,49,55,47],[55,50,55,48],[56,6,56,4],[56,12,56,10,"fractionalSeconds"],[56,29,56,27],[56,32,56,30,"Math"],[56,36,56,34],[56,37,56,35,"trunc"],[56,42,56,40],[56,43,57,6,"milliseconds"],[56,55,57,18],[56,58,57,21,"Math"],[56,62,57,25],[56,63,57,26,"pow"],[56,66,57,29],[56,67,57,30],[56,69,57,32],[56,71,57,34,"fractionDigits"],[56,85,57,48],[56,88,57,51],[56,89,57,52],[56,90,58,4],[56,91,58,5],[57,6,59,4,"fractionalSecond"],[57,22,59,20],[57,25,59,23],[57,28,59,26],[57,31,59,29],[57,35,59,29,"addLeadingZeros"],[57,67,59,44],[57,69,59,45,"fractionalSeconds"],[57,86,59,62],[57,88,59,64,"fractionDigits"],[57,102,59,78],[57,103,59,79],[58,4,60,2],[59,4,62,2],[59,8,62,6,"offset"],[59,14,62,12],[59,17,62,15],[59,19,62,17],[60,4,63,2],[60,10,63,8,"tzOffset"],[60,18,63,16],[60,21,63,19,"date_"],[60,26,63,24],[60,27,63,25,"getTimezoneOffset"],[60,44,63,42],[60,45,63,43],[60,46,63,44],[61,4,65,2],[61,8,65,6,"tzOffset"],[61,16,65,14],[61,21,65,19],[61,22,65,20],[61,24,65,22],[62,6,66,4],[62,12,66,10,"absoluteOffset"],[62,26,66,24],[62,29,66,27,"Math"],[62,33,66,31],[62,34,66,32,"abs"],[62,37,66,35],[62,38,66,36,"tzOffset"],[62,46,66,44],[62,47,66,45],[63,6,67,4],[63,12,67,10,"hourOffset"],[63,22,67,20],[63,25,67,23],[63,29,67,23,"addLeadingZeros"],[63,61,67,38],[63,63,67,39,"Math"],[63,67,67,43],[63,68,67,44,"trunc"],[63,73,67,49],[63,74,67,50,"absoluteOffset"],[63,88,67,64],[63,91,67,67],[63,93,67,69],[63,94,67,70],[63,96,67,72],[63,97,67,73],[63,98,67,74],[64,6,68,4],[64,12,68,10,"minuteOffset"],[64,24,68,22],[64,27,68,25],[64,31,68,25,"addLeadingZeros"],[64,63,68,40],[64,65,68,41,"absoluteOffset"],[64,79,68,55],[64,82,68,58],[64,84,68,60],[64,86,68,62],[64,87,68,63],[64,88,68,64],[65,6,69,4],[66,6,70,4],[66,12,70,10,"sign"],[66,16,70,14],[66,19,70,17,"tzOffset"],[66,27,70,25],[66,30,70,28],[66,31,70,29],[66,34,70,32],[66,37,70,35],[66,40,70,38],[66,43,70,41],[67,6,72,4,"offset"],[67,12,72,10],[67,15,72,13],[67,18,72,16,"sign"],[67,22,72,20],[67,25,72,23,"hourOffset"],[67,35,72,33],[67,39,72,37,"minuteOffset"],[67,51,72,49],[67,53,72,51],[68,4,73,2],[68,5,73,3],[68,11,73,9],[69,6,74,4,"offset"],[69,12,74,10],[69,15,74,13],[69,18,74,16],[70,4,75,2],[71,4,77,2],[71,11,77,9],[71,14,77,12,"year"],[71,18,77,16],[71,22,77,20,"month"],[71,27,77,25],[71,31,77,29,"day"],[71,34,77,32],[71,38,77,36,"hour"],[71,42,77,40],[71,46,77,44,"minute"],[71,52,77,50],[71,56,77,54,"second"],[71,62,77,60],[71,65,77,63,"fractionalSecond"],[71,81,77,79],[71,84,77,82,"offset"],[71,90,77,88],[71,92,77,90],[72,2,78,0],[74,2,80,0],[75,2,80,0],[75,6,80,0,"_default"],[75,14,80,0],[75,17,80,0,"exports"],[75,24,80,0],[75,25,80,0,"default"],[75,32,80,0],[75,35,81,15,"formatRFC3339"],[75,48,81,28],[76,0,81,28],[76,3]],"functionMap":{"names":["<global>","formatRFC3339"],"mappings":"AAA;OCmC;CD0C"}},"type":"js/module"}]}