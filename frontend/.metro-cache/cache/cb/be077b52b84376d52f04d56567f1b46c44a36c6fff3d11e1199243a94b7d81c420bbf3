{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./startOfHour.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":47,"index":106}}],"key":"gsNPR7paXo/jaBNUOzJyCRS/o84=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.isSameHour = isSameHour;\n  var _normalizeDates = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  var _startOfHour = require(_dependencyMap[1], \"./startOfHour.js\");\n  /**\n   * The {@link isSameHour} function options.\n   */\n\n  /**\n   * @name isSameHour\n   * @category Hour Helpers\n   * @summary Are the given dates in the same hour (and same day)?\n   *\n   * @description\n   * Are the given dates in the same hour (and same day)?\n   *\n   * @param dateLeft - The first date to check\n   * @param dateRight - The second date to check\n   * @param options - An object with options\n   *\n   * @returns The dates are in the same hour (and same day)\n   *\n   * @example\n   * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?\n   * const result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 6, 30))\n   * //=> true\n   *\n   * @example\n   * // Are 4 September 2014 06:00:00 and 5 September 06:00:00 in the same hour?\n   * const result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 5, 6, 0))\n   * //=> false\n   */\n  function isSameHour(dateLeft, dateRight, options) {\n    const [dateLeft_, dateRight_] = (0, _normalizeDates.normalizeDates)(options?.in, dateLeft, dateRight);\n    return +(0, _startOfHour.startOfHour)(dateLeft_) === +(0, _startOfHour.startOfHour)(dateRight_);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = isSameHour;\n});","lineCount":44,"map":[[7,2,1,0],[7,6,1,0,"_normalizeDates"],[7,21,1,0],[7,24,1,0,"require"],[7,31,1,0],[7,32,1,0,"_dependencyMap"],[7,46,1,0],[8,2,2,0],[8,6,2,0,"_startOfHour"],[8,18,2,0],[8,21,2,0,"require"],[8,28,2,0],[8,29,2,0,"_dependencyMap"],[8,43,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,2,32,7],[37,11,32,16,"isSameHour"],[37,21,32,26,"isSameHour"],[37,22,32,27,"dateLeft"],[37,30,32,35],[37,32,32,37,"dateRight"],[37,41,32,46],[37,43,32,48,"options"],[37,50,32,55],[37,52,32,57],[38,4,33,2],[38,10,33,8],[38,11,33,9,"dateLeft_"],[38,20,33,18],[38,22,33,20,"dateRight_"],[38,32,33,30],[38,33,33,31],[38,36,33,34],[38,40,33,34,"normalizeDates"],[38,70,33,48],[38,72,34,4,"options"],[38,79,34,11],[38,81,34,13,"in"],[38,83,34,15],[38,85,35,4,"dateLeft"],[38,93,35,12],[38,95,36,4,"dateRight"],[38,104,37,2],[38,105,37,3],[39,4,38,2],[39,11,38,9],[39,12,38,10],[39,16,38,10,"startOfHour"],[39,40,38,21],[39,42,38,22,"dateLeft_"],[39,51,38,31],[39,52,38,32],[39,57,38,37],[39,58,38,38],[39,62,38,38,"startOfHour"],[39,86,38,49],[39,88,38,50,"dateRight_"],[39,98,38,60],[39,99,38,61],[40,2,39,0],[42,2,41,0],[43,2,41,0],[43,6,41,0,"_default"],[43,14,41,0],[43,17,41,0,"exports"],[43,24,41,0],[43,25,41,0,"default"],[43,32,41,0],[43,35,42,15,"isSameHour"],[43,45,42,25],[44,0,42,25],[44,3]],"functionMap":{"names":["<global>","isSameHour"],"mappings":"AAA;OC+B;CDO"}},"type":"js/module"}]}