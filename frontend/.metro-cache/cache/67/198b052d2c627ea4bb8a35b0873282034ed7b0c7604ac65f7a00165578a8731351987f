{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"]}},{"name":"./addWeeks.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":41,"index":106}}],"key":"WbXWlJ47iqg6m+zxE/w0za675g4=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":107},"end":{"line":3,"column":51,"index":158}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./startOfWeek.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":159},"end":{"line":4,"column":47,"index":206}}],"key":"P3QLf1gnhZwOwCLzrccpsspoyVY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachWeekOfInterval = eachWeekOfInterval;\n  var _normalizeInterval = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _addWeeks = require(_dependencyMap[1], \"./addWeeks.js\");\n  var _constructFrom = require(_dependencyMap[2], \"./constructFrom.js\");\n  var _startOfWeek = require(_dependencyMap[3], \"./startOfWeek.js\");\n  /**\n   * The {@link eachWeekOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the interval start date,\n   * then the end interval date. If a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachWeekOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of weeks within the specified time interval.\n   *\n   * @description\n   * Return the array of weeks within the specified time interval.\n   *\n   * @param interval - The interval.\n   * @param options - An object with options.\n   *\n   * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\n   *\n   * @example\n   * // Each week within interval 6 October 2014 - 23 November 2014:\n   * const result = eachWeekOfInterval({\n   *   start: new Date(2014, 9, 6),\n   *   end: new Date(2014, 10, 23)\n   * })\n   * //=> [\n   * //   Sun Oct 05 2014 00:00:00,\n   * //   Sun Oct 12 2014 00:00:00,\n   * //   Sun Oct 19 2014 00:00:00,\n   * //   Sun Oct 26 2014 00:00:00,\n   * //   Sun Nov 02 2014 00:00:00,\n   * //   Sun Nov 09 2014 00:00:00,\n   * //   Sun Nov 16 2014 00:00:00,\n   * //   Sun Nov 23 2014 00:00:00\n   * // ]\n   */\n  function eachWeekOfInterval(interval, options) {\n    const {\n      start,\n      end\n    } = (0, _normalizeInterval.normalizeInterval)(options?.in, interval);\n    let reversed = +start > +end;\n    const startDateWeek = reversed ? (0, _startOfWeek.startOfWeek)(end, options) : (0, _startOfWeek.startOfWeek)(start, options);\n    const endDateWeek = reversed ? (0, _startOfWeek.startOfWeek)(start, options) : (0, _startOfWeek.startOfWeek)(end, options);\n    startDateWeek.setHours(15);\n    endDateWeek.setHours(15);\n    const endTime = +endDateWeek.getTime();\n    let currentDate = startDateWeek;\n    let step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    const dates = [];\n    while (+currentDate <= endTime) {\n      currentDate.setHours(0);\n      dates.push((0, _constructFrom.constructFrom)(start, currentDate));\n      currentDate = (0, _addWeeks.addWeeks)(currentDate, step);\n      currentDate.setHours(15);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachWeekOfInterval;\n});","lineCount":81,"map":[[7,2,1,0],[7,6,1,0,"_normalizeInterval"],[7,24,1,0],[7,27,1,0,"require"],[7,34,1,0],[7,35,1,0,"_dependencyMap"],[7,49,1,0],[8,2,2,0],[8,6,2,0,"_addWeeks"],[8,15,2,0],[8,18,2,0,"require"],[8,25,2,0],[8,26,2,0,"_dependencyMap"],[8,40,2,0],[9,2,3,0],[9,6,3,0,"_constructFrom"],[9,20,3,0],[9,23,3,0,"require"],[9,30,3,0],[9,31,3,0,"_dependencyMap"],[9,45,3,0],[10,2,4,0],[10,6,4,0,"_startOfWeek"],[10,18,4,0],[10,21,4,0,"require"],[10,28,4,0],[10,29,4,0,"_dependencyMap"],[10,43,4,0],[11,2,6,0],[12,0,7,0],[13,0,8,0],[15,2,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[21,2,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,2,46,7],[51,11,46,16,"eachWeekOfInterval"],[51,29,46,34,"eachWeekOfInterval"],[51,30,46,35,"interval"],[51,38,46,43],[51,40,46,45,"options"],[51,47,46,52],[51,49,46,54],[52,4,47,2],[52,10,47,8],[53,6,47,10,"start"],[53,11,47,15],[54,6,47,17,"end"],[55,4,47,21],[55,5,47,22],[55,8,47,25],[55,12,47,25,"normalizeInterval"],[55,48,47,42],[55,50,47,43,"options"],[55,57,47,50],[55,59,47,52,"in"],[55,61,47,54],[55,63,47,56,"interval"],[55,71,47,64],[55,72,47,65],[56,4,49,2],[56,8,49,6,"reversed"],[56,16,49,14],[56,19,49,17],[56,20,49,18,"start"],[56,25,49,23],[56,28,49,26],[56,29,49,27,"end"],[56,32,49,30],[57,4,50,2],[57,10,50,8,"startDateWeek"],[57,23,50,21],[57,26,50,24,"reversed"],[57,34,50,32],[57,37,51,6],[57,41,51,6,"startOfWeek"],[57,65,51,17],[57,67,51,18,"end"],[57,70,51,21],[57,72,51,23,"options"],[57,79,51,30],[57,80,51,31],[57,83,52,6],[57,87,52,6,"startOfWeek"],[57,111,52,17],[57,113,52,18,"start"],[57,118,52,23],[57,120,52,25,"options"],[57,127,52,32],[57,128,52,33],[58,4,53,2],[58,10,53,8,"endDateWeek"],[58,21,53,19],[58,24,53,22,"reversed"],[58,32,53,30],[58,35,54,6],[58,39,54,6,"startOfWeek"],[58,63,54,17],[58,65,54,18,"start"],[58,70,54,23],[58,72,54,25,"options"],[58,79,54,32],[58,80,54,33],[58,83,55,6],[58,87,55,6,"startOfWeek"],[58,111,55,17],[58,113,55,18,"end"],[58,116,55,21],[58,118,55,23,"options"],[58,125,55,30],[58,126,55,31],[59,4,57,2,"startDateWeek"],[59,17,57,15],[59,18,57,16,"setHours"],[59,26,57,24],[59,27,57,25],[59,29,57,27],[59,30,57,28],[60,4,58,2,"endDateWeek"],[60,15,58,13],[60,16,58,14,"setHours"],[60,24,58,22],[60,25,58,23],[60,27,58,25],[60,28,58,26],[61,4,60,2],[61,10,60,8,"endTime"],[61,17,60,15],[61,20,60,18],[61,21,60,19,"endDateWeek"],[61,32,60,30],[61,33,60,31,"getTime"],[61,40,60,38],[61,41,60,39],[61,42,60,40],[62,4,61,2],[62,8,61,6,"currentDate"],[62,19,61,17],[62,22,61,20,"startDateWeek"],[62,35,61,33],[63,4,63,2],[63,8,63,6,"step"],[63,12,63,10],[63,15,63,13,"options"],[63,22,63,20],[63,24,63,22,"step"],[63,28,63,26],[63,32,63,30],[63,33,63,31],[64,4,64,2],[64,8,64,6],[64,9,64,7,"step"],[64,13,64,11],[64,15,64,13],[64,22,64,20],[64,24,64,22],[65,4,65,2],[65,8,65,6,"step"],[65,12,65,10],[65,15,65,13],[65,16,65,14],[65,18,65,16],[66,6,66,4,"step"],[66,10,66,8],[66,13,66,11],[66,14,66,12,"step"],[66,18,66,16],[67,6,67,4,"reversed"],[67,14,67,12],[67,17,67,15],[67,18,67,16,"reversed"],[67,26,67,24],[68,4,68,2],[69,4,70,2],[69,10,70,8,"dates"],[69,15,70,13],[69,18,70,16],[69,20,70,18],[70,4,72,2],[70,11,72,9],[70,12,72,10,"currentDate"],[70,23,72,21],[70,27,72,25,"endTime"],[70,34,72,32],[70,36,72,34],[71,6,73,4,"currentDate"],[71,17,73,15],[71,18,73,16,"setHours"],[71,26,73,24],[71,27,73,25],[71,28,73,26],[71,29,73,27],[72,6,74,4,"dates"],[72,11,74,9],[72,12,74,10,"push"],[72,16,74,14],[72,17,74,15],[72,21,74,15,"constructFrom"],[72,49,74,28],[72,51,74,29,"start"],[72,56,74,34],[72,58,74,36,"currentDate"],[72,69,74,47],[72,70,74,48],[72,71,74,49],[73,6,75,4,"currentDate"],[73,17,75,15],[73,20,75,18],[73,24,75,18,"addWeeks"],[73,42,75,26],[73,44,75,27,"currentDate"],[73,55,75,38],[73,57,75,40,"step"],[73,61,75,44],[73,62,75,45],[74,6,76,4,"currentDate"],[74,17,76,15],[74,18,76,16,"setHours"],[74,26,76,24],[74,27,76,25],[74,29,76,27],[74,30,76,28],[75,4,77,2],[76,4,79,2],[76,11,79,9,"reversed"],[76,19,79,17],[76,22,79,20,"dates"],[76,27,79,25],[76,28,79,26,"reverse"],[76,35,79,33],[76,36,79,34],[76,37,79,35],[76,40,79,38,"dates"],[76,45,79,43],[77,2,80,0],[79,2,82,0],[80,2,82,0],[80,6,82,0,"_default"],[80,14,82,0],[80,17,82,0,"exports"],[80,24,82,0],[80,25,82,0,"default"],[80,32,82,0],[80,35,83,15,"eachWeekOfInterval"],[80,53,83,33],[81,0,83,33],[81,3]],"functionMap":{"names":["<global>","eachWeekOfInterval"],"mappings":"AAA;OC6C;CDkC"}},"type":"js/module"}]}