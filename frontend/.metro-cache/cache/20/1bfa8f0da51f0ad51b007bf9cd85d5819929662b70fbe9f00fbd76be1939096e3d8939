{"dependencies":[{"name":"../Parser.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"CIJslq/MUqKep4ImmeyUTywuBTk=","exportNames":["*"]}},{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":40},"end":{"line":3,"column":43,"index":83}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StandAloneQuarterParser = void 0;\n  var _Parser = require(_dependencyMap[0], \"../Parser.js\");\n  var _utils = require(_dependencyMap[1], \"../utils.js\");\n  class StandAloneQuarterParser extends _Parser.Parser {\n    priority = 120;\n    parse(dateString, token, match) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case \"q\":\n        case \"qq\":\n          // 01, 02, 03, 04\n          return (0, _utils.parseNDigits)(token.length, dateString);\n        // 1st, 2nd, 3rd, 4th\n        case \"qo\":\n          return match.ordinalNumber(dateString, {\n            unit: \"quarter\"\n          });\n        // Q1, Q2, Q3, Q4\n        case \"qqq\":\n          return match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\"\n          }) || match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\"\n          });\n\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n        case \"qqqqq\":\n          return match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\"\n          });\n        // 1st quarter, 2nd quarter, ...\n        case \"qqqq\":\n        default:\n          return match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\"\n          }) || match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\"\n          }) || match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\"\n          });\n      }\n    }\n    validate(_date, value) {\n      return value >= 1 && value <= 4;\n    }\n    set(date, _flags, value) {\n      date.setMonth((value - 1) * 3, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n    incompatibleTokens = [\"Y\", \"R\", \"Q\", \"M\", \"L\", \"w\", \"I\", \"d\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n  }\n  exports.StandAloneQuarterParser = StandAloneQuarterParser;\n});","lineCount":64,"map":[[6,2,1,0],[6,6,1,0,"_Parser"],[6,13,1,0],[6,16,1,0,"require"],[6,23,1,0],[6,24,1,0,"_dependencyMap"],[6,38,1,0],[7,2,3,0],[7,6,3,0,"_utils"],[7,12,3,0],[7,15,3,0,"require"],[7,22,3,0],[7,23,3,0,"_dependencyMap"],[7,37,3,0],[8,2,5,7],[8,8,5,13,"StandAloneQuarterParser"],[8,31,5,36],[8,40,5,45,"Parser"],[8,54,5,51],[8,55,5,52],[9,4,6,2,"priority"],[9,12,6,10],[9,15,6,13],[9,18,6,16],[10,4,8,2,"parse"],[10,9,8,7,"parse"],[10,10,8,8,"dateString"],[10,20,8,18],[10,22,8,20,"token"],[10,27,8,25],[10,29,8,27,"match"],[10,34,8,32],[10,36,8,34],[11,6,9,4],[11,14,9,12,"token"],[11,19,9,17],[12,8,10,6],[13,8,11,6],[13,13,11,11],[13,16,11,14],[14,8,12,6],[14,13,12,11],[14,17,12,15],[15,10,12,17],[16,10,13,8],[16,17,13,15],[16,21,13,15,"parseNDigits"],[16,40,13,27],[16,42,13,28,"token"],[16,47,13,33],[16,48,13,34,"length"],[16,54,13,40],[16,56,13,42,"dateString"],[16,66,13,52],[16,67,13,53],[17,8,14,6],[18,8,15,6],[18,13,15,11],[18,17,15,15],[19,10,16,8],[19,17,16,15,"match"],[19,22,16,20],[19,23,16,21,"ordinalNumber"],[19,36,16,34],[19,37,16,35,"dateString"],[19,47,16,45],[19,49,16,47],[20,12,16,49,"unit"],[20,16,16,53],[20,18,16,55],[21,10,16,65],[21,11,16,66],[21,12,16,67],[22,8,17,6],[23,8,18,6],[23,13,18,11],[23,18,18,16],[24,10,19,8],[24,17,20,10,"match"],[24,22,20,15],[24,23,20,16,"quarter"],[24,30,20,23],[24,31,20,24,"dateString"],[24,41,20,34],[24,43,20,36],[25,12,21,12,"width"],[25,17,21,17],[25,19,21,19],[25,32,21,32],[26,12,22,12,"context"],[26,19,22,19],[26,21,22,21],[27,10,23,10],[27,11,23,11],[27,12,23,12],[27,16,24,10,"match"],[27,21,24,15],[27,22,24,16,"quarter"],[27,29,24,23],[27,30,24,24,"dateString"],[27,40,24,34],[27,42,24,36],[28,12,25,12,"width"],[28,17,25,17],[28,19,25,19],[28,27,25,27],[29,12,26,12,"context"],[29,19,26,19],[29,21,26,21],[30,10,27,10],[30,11,27,11],[30,12,27,12],[32,8,30,6],[33,8,31,6],[33,13,31,11],[33,20,31,18],[34,10,32,8],[34,17,32,15,"match"],[34,22,32,20],[34,23,32,21,"quarter"],[34,30,32,28],[34,31,32,29,"dateString"],[34,41,32,39],[34,43,32,41],[35,12,33,10,"width"],[35,17,33,15],[35,19,33,17],[35,27,33,25],[36,12,34,10,"context"],[36,19,34,17],[36,21,34,19],[37,10,35,8],[37,11,35,9],[37,12,35,10],[38,8,36,6],[39,8,37,6],[39,13,37,11],[39,19,37,17],[40,8,38,6],[41,10,39,8],[41,17,40,10,"match"],[41,22,40,15],[41,23,40,16,"quarter"],[41,30,40,23],[41,31,40,24,"dateString"],[41,41,40,34],[41,43,40,36],[42,12,41,12,"width"],[42,17,41,17],[42,19,41,19],[42,25,41,25],[43,12,42,12,"context"],[43,19,42,19],[43,21,42,21],[44,10,43,10],[44,11,43,11],[44,12,43,12],[44,16,44,10,"match"],[44,21,44,15],[44,22,44,16,"quarter"],[44,29,44,23],[44,30,44,24,"dateString"],[44,40,44,34],[44,42,44,36],[45,12,45,12,"width"],[45,17,45,17],[45,19,45,19],[45,32,45,32],[46,12,46,12,"context"],[46,19,46,19],[46,21,46,21],[47,10,47,10],[47,11,47,11],[47,12,47,12],[47,16,48,10,"match"],[47,21,48,15],[47,22,48,16,"quarter"],[47,29,48,23],[47,30,48,24,"dateString"],[47,40,48,34],[47,42,48,36],[48,12,49,12,"width"],[48,17,49,17],[48,19,49,19],[48,27,49,27],[49,12,50,12,"context"],[49,19,50,19],[49,21,50,21],[50,10,51,10],[50,11,51,11],[50,12,51,12],[51,6,53,4],[52,4,54,2],[53,4,56,2,"validate"],[53,12,56,10,"validate"],[53,13,56,11,"_date"],[53,18,56,16],[53,20,56,18,"value"],[53,25,56,23],[53,27,56,25],[54,6,57,4],[54,13,57,11,"value"],[54,18,57,16],[54,22,57,20],[54,23,57,21],[54,27,57,25,"value"],[54,32,57,30],[54,36,57,34],[54,37,57,35],[55,4,58,2],[56,4,60,2,"set"],[56,7,60,5,"set"],[56,8,60,6,"date"],[56,12,60,10],[56,14,60,12,"_flags"],[56,20,60,18],[56,22,60,20,"value"],[56,27,60,25],[56,29,60,27],[57,6,61,4,"date"],[57,10,61,8],[57,11,61,9,"setMonth"],[57,19,61,17],[57,20,61,18],[57,21,61,19,"value"],[57,26,61,24],[57,29,61,27],[57,30,61,28],[57,34,61,32],[57,35,61,33],[57,37,61,35],[57,38,61,36],[57,39,61,37],[58,6,62,4,"date"],[58,10,62,8],[58,11,62,9,"setHours"],[58,19,62,17],[58,20,62,18],[58,21,62,19],[58,23,62,21],[58,24,62,22],[58,26,62,24],[58,27,62,25],[58,29,62,27],[58,30,62,28],[58,31,62,29],[59,6,63,4],[59,13,63,11,"date"],[59,17,63,15],[60,4,64,2],[61,4,66,2,"incompatibleTokens"],[61,22,66,20],[61,25,66,23],[61,26,67,4],[61,29,67,7],[61,31,68,4],[61,34,68,7],[61,36,69,4],[61,39,69,7],[61,41,70,4],[61,44,70,7],[61,46,71,4],[61,49,71,7],[61,51,72,4],[61,54,72,7],[61,56,73,4],[61,59,73,7],[61,61,74,4],[61,64,74,7],[61,66,75,4],[61,69,75,7],[61,71,76,4],[61,74,76,7],[61,76,77,4],[61,79,77,7],[61,81,78,4],[61,84,78,7],[61,86,79,4],[61,89,79,7],[61,91,80,4],[61,94,80,7],[61,95,81,3],[62,2,82,0],[63,2,82,1,"exports"],[63,9,82,1],[63,10,82,1,"StandAloneQuarterParser"],[63,33,82,1],[63,36,82,1,"StandAloneQuarterParser"],[63,59,82,1],[64,0,82,1],[64,3]],"functionMap":{"names":["<global>","StandAloneQuarterParser","parse","validate","set"],"mappings":"AAA;OCI;ECG;GD8C;EEE;GFE;EGE;GHI;CDkB"}},"type":"js/module"}]}