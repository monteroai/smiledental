{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":10,"column":24,"index":216}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}},{"name":"./differenceInCalendarDays.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":217},"end":{"line":11,"column":73,"index":290}}],"key":"imq/EGPR6TLwAkGUJvGZSPH1SeI=","exportNames":["*"]}},{"name":"./differenceInCalendarMonths.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":291},"end":{"line":12,"column":77,"index":368}}],"key":"WPK2784aH6rdvcSt3z4dBLNc+Ig=","exportNames":["*"]}},{"name":"./differenceInCalendarQuarters.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":369},"end":{"line":13,"column":81,"index":450}}],"key":"Zs/wZgi35nH/jYA8L9JKCsYDbIE=","exportNames":["*"]}},{"name":"./differenceInCalendarWeeks.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":451},"end":{"line":14,"column":75,"index":526}}],"key":"LmIJT8E3Lm9xavoky6kerZ5REg8=","exportNames":["*"]}},{"name":"./differenceInCalendarYears.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":527},"end":{"line":15,"column":75,"index":602}}],"key":"r9nTcuC0O8N4Xx/liK0S/qGfkLg=","exportNames":["*"]}},{"name":"./differenceInHours.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":603},"end":{"line":16,"column":59,"index":662}}],"key":"QE7VgHxn8gofEmpg4yZKjuel56Y=","exportNames":["*"]}},{"name":"./differenceInMinutes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":663},"end":{"line":17,"column":63,"index":726}}],"key":"Go9oRZ6iakho6dTK2AbMPQZClxo=","exportNames":["*"]}},{"name":"./differenceInSeconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":18,"column":0,"index":727},"end":{"line":18,"column":63,"index":790}}],"key":"40yFAaHgVIChYRicd6k8qNnd60I=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.intlFormatDistance = intlFormatDistance;\n  var _normalizeDates = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  var _constants = require(_dependencyMap[1], \"./constants.js\");\n  var _differenceInCalendarDays = require(_dependencyMap[2], \"./differenceInCalendarDays.js\");\n  var _differenceInCalendarMonths = require(_dependencyMap[3], \"./differenceInCalendarMonths.js\");\n  var _differenceInCalendarQuarters = require(_dependencyMap[4], \"./differenceInCalendarQuarters.js\");\n  var _differenceInCalendarWeeks = require(_dependencyMap[5], \"./differenceInCalendarWeeks.js\");\n  var _differenceInCalendarYears = require(_dependencyMap[6], \"./differenceInCalendarYears.js\");\n  var _differenceInHours = require(_dependencyMap[7], \"./differenceInHours.js\");\n  var _differenceInMinutes = require(_dependencyMap[8], \"./differenceInMinutes.js\");\n  var _differenceInSeconds = require(_dependencyMap[9], \"./differenceInSeconds.js\");\n  /**\n   * The {@link intlFormatDistance} function options.\n   */\n\n  /**\n   * The unit used to format the distance in {@link intlFormatDistance}.\n   */\n\n  /**\n   * @name intlFormatDistance\n   * @category Common Helpers\n   * @summary Formats distance between two dates in a human-readable format\n   * @description\n   * The function calculates the difference between two dates and formats it as a human-readable string.\n   *\n   * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\n   *\n   * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\n   *\n   * See the table below for the unit picking logic:\n   *\n   * | Distance between dates | Result (past)  | Result (future) |\n   * | ---------------------- | -------------- | --------------- |\n   * | 0 seconds              | now            | now             |\n   * | 1-59 seconds           | X seconds ago  | in X seconds    |\n   * | 1-59 minutes           | X minutes ago  | in X minutes    |\n   * | 1-23 hours             | X hours ago    | in X hours      |\n   * | 1 day                  | yesterday      | tomorrow        |\n   * | 2-6 days               | X days ago     | in X days       |\n   * | 7 days                 | last week      | next week       |\n   * | 8 days-1 month         | X weeks ago    | in X weeks      |\n   * | 1 month                | last month     | next month      |\n   * | 2-3 months             | X months ago   | in X months     |\n   * | 1 quarter              | last quarter   | next quarter    |\n   * | 2-3 quarters           | X quarters ago | in X quarters   |\n   * | 1 year                 | last year      | next year       |\n   * | 2+ years               | X years ago    | in X years      |\n   *\n   * @param laterDate - The date\n   * @param earlierDate - The date to compare with.\n   * @param options - An object with options.\n   * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n   * The narrow one could be similar to the short one for some locales.\n   *\n   * @returns The distance in words according to language-sensitive relative time formatting.\n   *\n   * @throws `date` must not be Invalid Date\n   * @throws `baseDate` must not be Invalid Date\n   * @throws `options.unit` must not be invalid Unit\n   * @throws `options.locale` must not be invalid locale\n   * @throws `options.localeMatcher` must not be invalid localeMatcher\n   * @throws `options.numeric` must not be invalid numeric\n   * @throws `options.style` must not be invalid style\n   *\n   * @example\n   * // What is the distance between the dates when the fist date is after the second?\n   * intlFormatDistance(\n   *   new Date(1986, 3, 4, 11, 30, 0),\n   *   new Date(1986, 3, 4, 10, 30, 0)\n   * )\n   * //=> 'in 1 hour'\n   *\n   * // What is the distance between the dates when the fist date is before the second?\n   * intlFormatDistance(\n   *   new Date(1986, 3, 4, 10, 30, 0),\n   *   new Date(1986, 3, 4, 11, 30, 0)\n   * )\n   * //=> '1 hour ago'\n   *\n   * @example\n   * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\n   * intlFormatDistance(\n   *   new Date(1987, 6, 4, 10, 30, 0),\n   *   new Date(1986, 3, 4, 10, 30, 0),\n   *   { unit: 'quarter' }\n   * )\n   * //=> 'in 5 quarters'\n   *\n   * @example\n   * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\n   * intlFormatDistance(\n   *   new Date(1986, 3, 4, 11, 30, 0),\n   *   new Date(1986, 3, 4, 10, 30, 0),\n   *   { locale: 'es' }\n   * )\n   * //=> 'dentro de 1 hora'\n   *\n   * @example\n   * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\n   * intlFormatDistance(\n   *   new Date(1986, 3, 5, 11, 30, 0),\n   *   new Date(1986, 3, 4, 11, 30, 0),\n   *   { numeric: 'always' }\n   * )\n   * //=> 'in 1 day'\n   *\n   * @example\n   * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\n   * intlFormatDistance(\n   *   new Date(1988, 3, 4, 11, 30, 0),\n   *   new Date(1986, 3, 4, 11, 30, 0),\n   *   { style: 'short' }\n   * )\n   * //=> 'in 2 yr'\n   */\n  function intlFormatDistance(laterDate, earlierDate, options) {\n    let value = 0;\n    let unit;\n    const [laterDate_, earlierDate_] = (0, _normalizeDates.normalizeDates)(options?.in, laterDate, earlierDate);\n    if (!options?.unit) {\n      // Get the unit based on diffInSeconds calculations if no unit is specified\n      const diffInSeconds = (0, _differenceInSeconds.differenceInSeconds)(laterDate_, earlierDate_); // The smallest unit\n\n      if (Math.abs(diffInSeconds) < _constants.secondsInMinute) {\n        value = (0, _differenceInSeconds.differenceInSeconds)(laterDate_, earlierDate_);\n        unit = \"second\";\n      } else if (Math.abs(diffInSeconds) < _constants.secondsInHour) {\n        value = (0, _differenceInMinutes.differenceInMinutes)(laterDate_, earlierDate_);\n        unit = \"minute\";\n      } else if (Math.abs(diffInSeconds) < _constants.secondsInDay && Math.abs((0, _differenceInCalendarDays.differenceInCalendarDays)(laterDate_, earlierDate_)) < 1) {\n        value = (0, _differenceInHours.differenceInHours)(laterDate_, earlierDate_);\n        unit = \"hour\";\n      } else if (Math.abs(diffInSeconds) < _constants.secondsInWeek && (value = (0, _differenceInCalendarDays.differenceInCalendarDays)(laterDate_, earlierDate_)) && Math.abs(value) < 7) {\n        unit = \"day\";\n      } else if (Math.abs(diffInSeconds) < _constants.secondsInMonth) {\n        value = (0, _differenceInCalendarWeeks.differenceInCalendarWeeks)(laterDate_, earlierDate_);\n        unit = \"week\";\n      } else if (Math.abs(diffInSeconds) < _constants.secondsInQuarter) {\n        value = (0, _differenceInCalendarMonths.differenceInCalendarMonths)(laterDate_, earlierDate_);\n        unit = \"month\";\n      } else if (Math.abs(diffInSeconds) < _constants.secondsInYear) {\n        if ((0, _differenceInCalendarQuarters.differenceInCalendarQuarters)(laterDate_, earlierDate_) < 4) {\n          // To filter out cases that are less than a year but match 4 quarters\n          value = (0, _differenceInCalendarQuarters.differenceInCalendarQuarters)(laterDate_, earlierDate_);\n          unit = \"quarter\";\n        } else {\n          value = (0, _differenceInCalendarYears.differenceInCalendarYears)(laterDate_, earlierDate_);\n          unit = \"year\";\n        }\n      } else {\n        value = (0, _differenceInCalendarYears.differenceInCalendarYears)(laterDate_, earlierDate_);\n        unit = \"year\";\n      }\n    } else {\n      // Get the value if unit is specified\n      unit = options?.unit;\n      if (unit === \"second\") {\n        value = (0, _differenceInSeconds.differenceInSeconds)(laterDate_, earlierDate_);\n      } else if (unit === \"minute\") {\n        value = (0, _differenceInMinutes.differenceInMinutes)(laterDate_, earlierDate_);\n      } else if (unit === \"hour\") {\n        value = (0, _differenceInHours.differenceInHours)(laterDate_, earlierDate_);\n      } else if (unit === \"day\") {\n        value = (0, _differenceInCalendarDays.differenceInCalendarDays)(laterDate_, earlierDate_);\n      } else if (unit === \"week\") {\n        value = (0, _differenceInCalendarWeeks.differenceInCalendarWeeks)(laterDate_, earlierDate_);\n      } else if (unit === \"month\") {\n        value = (0, _differenceInCalendarMonths.differenceInCalendarMonths)(laterDate_, earlierDate_);\n      } else if (unit === \"quarter\") {\n        value = (0, _differenceInCalendarQuarters.differenceInCalendarQuarters)(laterDate_, earlierDate_);\n      } else if (unit === \"year\") {\n        value = (0, _differenceInCalendarYears.differenceInCalendarYears)(laterDate_, earlierDate_);\n      }\n    }\n    const rtf = new Intl.RelativeTimeFormat(options?.locale, Object.assign({\n      numeric: \"auto\"\n    }, options));\n    return rtf.format(value, unit);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = intlFormatDistance;\n});","lineCount":189,"map":[[7,2,1,0],[7,6,1,0,"_normalizeDates"],[7,21,1,0],[7,24,1,0,"require"],[7,31,1,0],[7,32,1,0,"_dependencyMap"],[7,46,1,0],[8,2,2,0],[8,6,2,0,"_constants"],[8,16,2,0],[8,19,2,0,"require"],[8,26,2,0],[8,27,2,0,"_dependencyMap"],[8,41,2,0],[9,2,11,0],[9,6,11,0,"_differenceInCalendarDays"],[9,31,11,0],[9,34,11,0,"require"],[9,41,11,0],[9,42,11,0,"_dependencyMap"],[9,56,11,0],[10,2,12,0],[10,6,12,0,"_differenceInCalendarMonths"],[10,33,12,0],[10,36,12,0,"require"],[10,43,12,0],[10,44,12,0,"_dependencyMap"],[10,58,12,0],[11,2,13,0],[11,6,13,0,"_differenceInCalendarQuarters"],[11,35,13,0],[11,38,13,0,"require"],[11,45,13,0],[11,46,13,0,"_dependencyMap"],[11,60,13,0],[12,2,14,0],[12,6,14,0,"_differenceInCalendarWeeks"],[12,32,14,0],[12,35,14,0,"require"],[12,42,14,0],[12,43,14,0,"_dependencyMap"],[12,57,14,0],[13,2,15,0],[13,6,15,0,"_differenceInCalendarYears"],[13,32,15,0],[13,35,15,0,"require"],[13,42,15,0],[13,43,15,0,"_dependencyMap"],[13,57,15,0],[14,2,16,0],[14,6,16,0,"_differenceInHours"],[14,24,16,0],[14,27,16,0,"require"],[14,34,16,0],[14,35,16,0,"_dependencyMap"],[14,49,16,0],[15,2,17,0],[15,6,17,0,"_differenceInMinutes"],[15,26,17,0],[15,29,17,0,"require"],[15,36,17,0],[15,37,17,0,"_dependencyMap"],[15,51,17,0],[16,2,18,0],[16,6,18,0,"_differenceInSeconds"],[16,26,18,0],[16,29,18,0,"require"],[16,36,18,0],[16,37,18,0,"_dependencyMap"],[16,51,18,0],[17,2,20,0],[18,0,21,0],[19,0,22,0],[21,2,24,0],[22,0,25,0],[23,0,26,0],[25,2,28,0],[26,0,29,0],[27,0,30,0],[28,0,31,0],[29,0,32,0],[30,0,33,0],[31,0,34,0],[32,0,35,0],[33,0,36,0],[34,0,37,0],[35,0,38,0],[36,0,39,0],[37,0,40,0],[38,0,41,0],[39,0,42,0],[40,0,43,0],[41,0,44,0],[42,0,45,0],[43,0,46,0],[44,0,47,0],[45,0,48,0],[46,0,49,0],[47,0,50,0],[48,0,51,0],[49,0,52,0],[50,0,53,0],[51,0,54,0],[52,0,55,0],[53,0,56,0],[54,0,57,0],[55,0,58,0],[56,0,59,0],[57,0,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,0,64,0],[62,0,65,0],[63,0,66,0],[64,0,67,0],[65,0,68,0],[66,0,69,0],[67,0,70,0],[68,0,71,0],[69,0,72,0],[70,0,73,0],[71,0,74,0],[72,0,75,0],[73,0,76,0],[74,0,77,0],[75,0,78,0],[76,0,79,0],[77,0,80,0],[78,0,81,0],[79,0,82,0],[80,0,83,0],[81,0,84,0],[82,0,85,0],[83,0,86,0],[84,0,87,0],[85,0,88,0],[86,0,89,0],[87,0,90,0],[88,0,91,0],[89,0,92,0],[90,0,93,0],[91,0,94,0],[92,0,95,0],[93,0,96,0],[94,0,97,0],[95,0,98,0],[96,0,99,0],[97,0,100,0],[98,0,101,0],[99,0,102,0],[100,0,103,0],[101,0,104,0],[102,0,105,0],[103,0,106,0],[104,0,107,0],[105,0,108,0],[106,0,109,0],[107,0,110,0],[108,0,111,0],[109,0,112,0],[110,0,113,0],[111,0,114,0],[112,0,115,0],[113,0,116,0],[114,0,117,0],[115,0,118,0],[116,0,119,0],[117,0,120,0],[118,0,121,0],[119,0,122,0],[120,0,123,0],[121,0,124,0],[122,2,125,7],[122,11,125,16,"intlFormatDistance"],[122,29,125,34,"intlFormatDistance"],[122,30,125,35,"laterDate"],[122,39,125,44],[122,41,125,46,"earlierDate"],[122,52,125,57],[122,54,125,59,"options"],[122,61,125,66],[122,63,125,68],[123,4,126,2],[123,8,126,6,"value"],[123,13,126,11],[123,16,126,14],[123,17,126,15],[124,4,127,2],[124,8,127,6,"unit"],[124,12,127,10],[125,4,129,2],[125,10,129,8],[125,11,129,9,"laterDate_"],[125,21,129,19],[125,23,129,21,"earlierDate_"],[125,35,129,33],[125,36,129,34],[125,39,129,37],[125,43,129,37,"normalizeDates"],[125,73,129,51],[125,75,130,4,"options"],[125,82,130,11],[125,84,130,13,"in"],[125,86,130,15],[125,88,131,4,"laterDate"],[125,97,131,13],[125,99,132,4,"earlierDate"],[125,110,133,2],[125,111,133,3],[126,4,135,2],[126,8,135,6],[126,9,135,7,"options"],[126,16,135,14],[126,18,135,16,"unit"],[126,22,135,20],[126,24,135,22],[127,6,136,4],[128,6,137,4],[128,12,137,10,"diffInSeconds"],[128,25,137,23],[128,28,137,26],[128,32,137,26,"differenceInSeconds"],[128,72,137,45],[128,74,137,46,"laterDate_"],[128,84,137,56],[128,86,137,58,"earlierDate_"],[128,98,137,70],[128,99,137,71],[128,100,137,72],[128,101,137,73],[130,6,139,4],[130,10,139,8,"Math"],[130,14,139,12],[130,15,139,13,"abs"],[130,18,139,16],[130,19,139,17,"diffInSeconds"],[130,32,139,30],[130,33,139,31],[130,36,139,34,"secondsInMinute"],[130,62,139,49],[130,64,139,51],[131,8,140,6,"value"],[131,13,140,11],[131,16,140,14],[131,20,140,14,"differenceInSeconds"],[131,60,140,33],[131,62,140,34,"laterDate_"],[131,72,140,44],[131,74,140,46,"earlierDate_"],[131,86,140,58],[131,87,140,59],[132,8,141,6,"unit"],[132,12,141,10],[132,15,141,13],[132,23,141,21],[133,6,142,4],[133,7,142,5],[133,13,142,11],[133,17,142,15,"Math"],[133,21,142,19],[133,22,142,20,"abs"],[133,25,142,23],[133,26,142,24,"diffInSeconds"],[133,39,142,37],[133,40,142,38],[133,43,142,41,"secondsInHour"],[133,67,142,54],[133,69,142,56],[134,8,143,6,"value"],[134,13,143,11],[134,16,143,14],[134,20,143,14,"differenceInMinutes"],[134,60,143,33],[134,62,143,34,"laterDate_"],[134,72,143,44],[134,74,143,46,"earlierDate_"],[134,86,143,58],[134,87,143,59],[135,8,144,6,"unit"],[135,12,144,10],[135,15,144,13],[135,23,144,21],[136,6,145,4],[136,7,145,5],[136,13,145,11],[136,17,146,6,"Math"],[136,21,146,10],[136,22,146,11,"abs"],[136,25,146,14],[136,26,146,15,"diffInSeconds"],[136,39,146,28],[136,40,146,29],[136,43,146,32,"secondsInDay"],[136,66,146,44],[136,70,147,6,"Math"],[136,74,147,10],[136,75,147,11,"abs"],[136,78,147,14],[136,79,147,15],[136,83,147,15,"differenceInCalendarDays"],[136,133,147,39],[136,135,147,40,"laterDate_"],[136,145,147,50],[136,147,147,52,"earlierDate_"],[136,159,147,64],[136,160,147,65],[136,161,147,66],[136,164,147,69],[136,165,147,70],[136,167,148,6],[137,8,149,6,"value"],[137,13,149,11],[137,16,149,14],[137,20,149,14,"differenceInHours"],[137,56,149,31],[137,58,149,32,"laterDate_"],[137,68,149,42],[137,70,149,44,"earlierDate_"],[137,82,149,56],[137,83,149,57],[138,8,150,6,"unit"],[138,12,150,10],[138,15,150,13],[138,21,150,19],[139,6,151,4],[139,7,151,5],[139,13,151,11],[139,17,152,6,"Math"],[139,21,152,10],[139,22,152,11,"abs"],[139,25,152,14],[139,26,152,15,"diffInSeconds"],[139,39,152,28],[139,40,152,29],[139,43,152,32,"secondsInWeek"],[139,67,152,45],[139,72,153,7,"value"],[139,77,153,12],[139,80,153,15],[139,84,153,15,"differenceInCalendarDays"],[139,134,153,39],[139,136,153,40,"laterDate_"],[139,146,153,50],[139,148,153,52,"earlierDate_"],[139,160,153,64],[139,161,153,65],[139,162,153,66],[139,166,154,6,"Math"],[139,170,154,10],[139,171,154,11,"abs"],[139,174,154,14],[139,175,154,15,"value"],[139,180,154,20],[139,181,154,21],[139,184,154,24],[139,185,154,25],[139,187,155,6],[140,8,156,6,"unit"],[140,12,156,10],[140,15,156,13],[140,20,156,18],[141,6,157,4],[141,7,157,5],[141,13,157,11],[141,17,157,15,"Math"],[141,21,157,19],[141,22,157,20,"abs"],[141,25,157,23],[141,26,157,24,"diffInSeconds"],[141,39,157,37],[141,40,157,38],[141,43,157,41,"secondsInMonth"],[141,68,157,55],[141,70,157,57],[142,8,158,6,"value"],[142,13,158,11],[142,16,158,14],[142,20,158,14,"differenceInCalendarWeeks"],[142,72,158,39],[142,74,158,40,"laterDate_"],[142,84,158,50],[142,86,158,52,"earlierDate_"],[142,98,158,64],[142,99,158,65],[143,8,159,6,"unit"],[143,12,159,10],[143,15,159,13],[143,21,159,19],[144,6,160,4],[144,7,160,5],[144,13,160,11],[144,17,160,15,"Math"],[144,21,160,19],[144,22,160,20,"abs"],[144,25,160,23],[144,26,160,24,"diffInSeconds"],[144,39,160,37],[144,40,160,38],[144,43,160,41,"secondsInQuarter"],[144,70,160,57],[144,72,160,59],[145,8,161,6,"value"],[145,13,161,11],[145,16,161,14],[145,20,161,14,"differenceInCalendarMonths"],[145,74,161,40],[145,76,161,41,"laterDate_"],[145,86,161,51],[145,88,161,53,"earlierDate_"],[145,100,161,65],[145,101,161,66],[146,8,162,6,"unit"],[146,12,162,10],[146,15,162,13],[146,22,162,20],[147,6,163,4],[147,7,163,5],[147,13,163,11],[147,17,163,15,"Math"],[147,21,163,19],[147,22,163,20,"abs"],[147,25,163,23],[147,26,163,24,"diffInSeconds"],[147,39,163,37],[147,40,163,38],[147,43,163,41,"secondsInYear"],[147,67,163,54],[147,69,163,56],[148,8,164,6],[148,12,164,10],[148,16,164,10,"differenceInCalendarQuarters"],[148,74,164,38],[148,76,164,39,"laterDate_"],[148,86,164,49],[148,88,164,51,"earlierDate_"],[148,100,164,63],[148,101,164,64],[148,104,164,67],[148,105,164,68],[148,107,164,70],[149,10,165,8],[150,10,166,8,"value"],[150,15,166,13],[150,18,166,16],[150,22,166,16,"differenceInCalendarQuarters"],[150,80,166,44],[150,82,166,45,"laterDate_"],[150,92,166,55],[150,94,166,57,"earlierDate_"],[150,106,166,69],[150,107,166,70],[151,10,167,8,"unit"],[151,14,167,12],[151,17,167,15],[151,26,167,24],[152,8,168,6],[152,9,168,7],[152,15,168,13],[153,10,169,8,"value"],[153,15,169,13],[153,18,169,16],[153,22,169,16,"differenceInCalendarYears"],[153,74,169,41],[153,76,169,42,"laterDate_"],[153,86,169,52],[153,88,169,54,"earlierDate_"],[153,100,169,66],[153,101,169,67],[154,10,170,8,"unit"],[154,14,170,12],[154,17,170,15],[154,23,170,21],[155,8,171,6],[156,6,172,4],[156,7,172,5],[156,13,172,11],[157,8,173,6,"value"],[157,13,173,11],[157,16,173,14],[157,20,173,14,"differenceInCalendarYears"],[157,72,173,39],[157,74,173,40,"laterDate_"],[157,84,173,50],[157,86,173,52,"earlierDate_"],[157,98,173,64],[157,99,173,65],[158,8,174,6,"unit"],[158,12,174,10],[158,15,174,13],[158,21,174,19],[159,6,175,4],[160,4,176,2],[160,5,176,3],[160,11,176,9],[161,6,177,4],[162,6,178,4,"unit"],[162,10,178,8],[162,13,178,11,"options"],[162,20,178,18],[162,22,178,20,"unit"],[162,26,178,24],[163,6,179,4],[163,10,179,8,"unit"],[163,14,179,12],[163,19,179,17],[163,27,179,25],[163,29,179,27],[164,8,180,6,"value"],[164,13,180,11],[164,16,180,14],[164,20,180,14,"differenceInSeconds"],[164,60,180,33],[164,62,180,34,"laterDate_"],[164,72,180,44],[164,74,180,46,"earlierDate_"],[164,86,180,58],[164,87,180,59],[165,6,181,4],[165,7,181,5],[165,13,181,11],[165,17,181,15,"unit"],[165,21,181,19],[165,26,181,24],[165,34,181,32],[165,36,181,34],[166,8,182,6,"value"],[166,13,182,11],[166,16,182,14],[166,20,182,14,"differenceInMinutes"],[166,60,182,33],[166,62,182,34,"laterDate_"],[166,72,182,44],[166,74,182,46,"earlierDate_"],[166,86,182,58],[166,87,182,59],[167,6,183,4],[167,7,183,5],[167,13,183,11],[167,17,183,15,"unit"],[167,21,183,19],[167,26,183,24],[167,32,183,30],[167,34,183,32],[168,8,184,6,"value"],[168,13,184,11],[168,16,184,14],[168,20,184,14,"differenceInHours"],[168,56,184,31],[168,58,184,32,"laterDate_"],[168,68,184,42],[168,70,184,44,"earlierDate_"],[168,82,184,56],[168,83,184,57],[169,6,185,4],[169,7,185,5],[169,13,185,11],[169,17,185,15,"unit"],[169,21,185,19],[169,26,185,24],[169,31,185,29],[169,33,185,31],[170,8,186,6,"value"],[170,13,186,11],[170,16,186,14],[170,20,186,14,"differenceInCalendarDays"],[170,70,186,38],[170,72,186,39,"laterDate_"],[170,82,186,49],[170,84,186,51,"earlierDate_"],[170,96,186,63],[170,97,186,64],[171,6,187,4],[171,7,187,5],[171,13,187,11],[171,17,187,15,"unit"],[171,21,187,19],[171,26,187,24],[171,32,187,30],[171,34,187,32],[172,8,188,6,"value"],[172,13,188,11],[172,16,188,14],[172,20,188,14,"differenceInCalendarWeeks"],[172,72,188,39],[172,74,188,40,"laterDate_"],[172,84,188,50],[172,86,188,52,"earlierDate_"],[172,98,188,64],[172,99,188,65],[173,6,189,4],[173,7,189,5],[173,13,189,11],[173,17,189,15,"unit"],[173,21,189,19],[173,26,189,24],[173,33,189,31],[173,35,189,33],[174,8,190,6,"value"],[174,13,190,11],[174,16,190,14],[174,20,190,14,"differenceInCalendarMonths"],[174,74,190,40],[174,76,190,41,"laterDate_"],[174,86,190,51],[174,88,190,53,"earlierDate_"],[174,100,190,65],[174,101,190,66],[175,6,191,4],[175,7,191,5],[175,13,191,11],[175,17,191,15,"unit"],[175,21,191,19],[175,26,191,24],[175,35,191,33],[175,37,191,35],[176,8,192,6,"value"],[176,13,192,11],[176,16,192,14],[176,20,192,14,"differenceInCalendarQuarters"],[176,78,192,42],[176,80,192,43,"laterDate_"],[176,90,192,53],[176,92,192,55,"earlierDate_"],[176,104,192,67],[176,105,192,68],[177,6,193,4],[177,7,193,5],[177,13,193,11],[177,17,193,15,"unit"],[177,21,193,19],[177,26,193,24],[177,32,193,30],[177,34,193,32],[178,8,194,6,"value"],[178,13,194,11],[178,16,194,14],[178,20,194,14,"differenceInCalendarYears"],[178,72,194,39],[178,74,194,40,"laterDate_"],[178,84,194,50],[178,86,194,52,"earlierDate_"],[178,98,194,64],[178,99,194,65],[179,6,195,4],[180,4,196,2],[181,4,198,2],[181,10,198,8,"rtf"],[181,13,198,11],[181,16,198,14],[181,20,198,18,"Intl"],[181,24,198,22],[181,25,198,23,"RelativeTimeFormat"],[181,43,198,41],[181,44,198,42,"options"],[181,51,198,49],[181,53,198,51,"locale"],[181,59,198,57],[181,61,198,57,"Object"],[181,67,198,57],[181,68,198,57,"assign"],[181,74,198,57],[182,6,199,4,"numeric"],[182,13,199,11],[182,15,199,13],[183,4,199,19],[183,7,200,7,"options"],[183,14,200,14],[183,15,201,3],[183,16,201,4],[184,4,203,2],[184,11,203,9,"rtf"],[184,14,203,12],[184,15,203,13,"format"],[184,21,203,19],[184,22,203,20,"value"],[184,27,203,25],[184,29,203,27,"unit"],[184,33,203,31],[184,34,203,32],[185,2,204,0],[187,2,206,0],[188,2,206,0],[188,6,206,0,"_default"],[188,14,206,0],[188,17,206,0,"exports"],[188,24,206,0],[188,25,206,0,"default"],[188,32,206,0],[188,35,207,15,"intlFormatDistance"],[188,53,207,33],[189,0,207,33],[189,3]],"functionMap":{"names":["<global>","intlFormatDistance"],"mappings":"AAA;OC4H;CD+E"}},"type":"js/module"}]}