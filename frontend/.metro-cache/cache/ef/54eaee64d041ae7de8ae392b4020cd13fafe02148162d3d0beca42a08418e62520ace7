{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.isSameMonth = isSameMonth;\n  var _normalizeDates = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  /**\n   * The {@link isSameMonth} function options.\n   */\n\n  /**\n   * @name isSameMonth\n   * @category Month Helpers\n   * @summary Are the given dates in the same month (and year)?\n   *\n   * @description\n   * Are the given dates in the same month (and year)?\n   *\n   * @param laterDate - The first date to check\n   * @param earlierDate - The second date to check\n   * @param options - An object with options\n   *\n   * @returns The dates are in the same month (and year)\n   *\n   * @example\n   * // Are 2 September 2014 and 25 September 2014 in the same month?\n   * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n   * //=> true\n   *\n   * @example\n   * // Are 2 September 2014 and 25 September 2015 in the same month?\n   * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))\n   * //=> false\n   */\n  function isSameMonth(laterDate, earlierDate, options) {\n    const [laterDate_, earlierDate_] = (0, _normalizeDates.normalizeDates)(options?.in, laterDate, earlierDate);\n    return laterDate_.getFullYear() === earlierDate_.getFullYear() && laterDate_.getMonth() === earlierDate_.getMonth();\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = isSameMonth;\n});","lineCount":43,"map":[[7,2,1,0],[7,6,1,0,"_normalizeDates"],[7,21,1,0],[7,24,1,0,"require"],[7,31,1,0],[7,32,1,0,"_dependencyMap"],[7,46,1,0],[8,2,3,0],[9,0,4,0],[10,0,5,0],[12,2,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,2,31,7],[36,11,31,16,"isSameMonth"],[36,22,31,27,"isSameMonth"],[36,23,31,28,"laterDate"],[36,32,31,37],[36,34,31,39,"earlierDate"],[36,45,31,50],[36,47,31,52,"options"],[36,54,31,59],[36,56,31,61],[37,4,32,2],[37,10,32,8],[37,11,32,9,"laterDate_"],[37,21,32,19],[37,23,32,21,"earlierDate_"],[37,35,32,33],[37,36,32,34],[37,39,32,37],[37,43,32,37,"normalizeDates"],[37,73,32,51],[37,75,33,4,"options"],[37,82,33,11],[37,84,33,13,"in"],[37,86,33,15],[37,88,34,4,"laterDate"],[37,97,34,13],[37,99,35,4,"earlierDate"],[37,110,36,2],[37,111,36,3],[38,4,37,2],[38,11,38,4,"laterDate_"],[38,21,38,14],[38,22,38,15,"getFullYear"],[38,33,38,26],[38,34,38,27],[38,35,38,28],[38,40,38,33,"earlierDate_"],[38,52,38,45],[38,53,38,46,"getFullYear"],[38,64,38,57],[38,65,38,58],[38,66,38,59],[38,70,39,4,"laterDate_"],[38,80,39,14],[38,81,39,15,"getMonth"],[38,89,39,23],[38,90,39,24],[38,91,39,25],[38,96,39,30,"earlierDate_"],[38,108,39,42],[38,109,39,43,"getMonth"],[38,117,39,51],[38,118,39,52],[38,119,39,53],[39,2,41,0],[41,2,43,0],[42,2,43,0],[42,6,43,0,"_default"],[42,14,43,0],[42,17,43,0,"exports"],[42,24,43,0],[42,25,43,0,"default"],[42,32,43,0],[42,35,44,15,"isSameMonth"],[42,46,44,26],[43,0,44,26],[43,3]],"functionMap":{"names":["<global>","isSameMonth"],"mappings":"AAA;OC8B;CDU"}},"type":"js/module"}]}