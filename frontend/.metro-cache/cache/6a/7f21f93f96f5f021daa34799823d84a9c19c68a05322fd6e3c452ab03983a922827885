{"dependencies":[{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"LkiOAV1LQTQ7MnwpzKKtm1nDXGQ=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":117},"end":{"line":3,"column":37,"index":154}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.roundToNearestHours = roundToNearestHours;\n  var _getRoundingMethod = require(_dependencyMap[0], \"./_lib/getRoundingMethod.js\");\n  var _constructFrom = require(_dependencyMap[1], \"./constructFrom.js\");\n  var _toDate = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * The {@link roundToNearestHours} function options.\n   */\n\n  /**\n   * @name roundToNearestHours\n   * @category Hour Helpers\n   * @summary Rounds the given date to the nearest hour\n   *\n   * @description\n   * Rounds the given date to the nearest hour (or number of hours).\n   * Rounds up when the given date is exactly between the nearest round hours.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to round\n   * @param options - An object with options.\n   *\n   * @returns The new date rounded to the closest hour\n   *\n   * @example\n   * // Round 10 July 2014 12:34:56 to nearest hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\n   * //=> Thu Jul 10 2014 13:00:00\n   *\n   * @example\n   * // Round 10 July 2014 12:34:56 to nearest half hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\n   * //=> Thu Jul 10 2014 12:00:00\n   *\n   * @example\n   * // Round 10 July 2014 12:34:56 to nearest half hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\n   * //=> Thu Jul 10 2014 16:00:00\n   *\n   * @example\n   * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\n   * //=> Thu Jul 10 2014 02:00:00\n   *\n   * @example\n   * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\n   * //=> Thu Jul 10 2014 08:00:00\n   */\n  function roundToNearestHours(date, options) {\n    const nearestTo = options?.nearestTo ?? 1;\n    if (nearestTo < 1 || nearestTo > 12) return (0, _constructFrom.constructFrom)(options?.in || date, NaN);\n    const date_ = (0, _toDate.toDate)(date, options?.in);\n    const fractionalMinutes = date_.getMinutes() / 60;\n    const fractionalSeconds = date_.getSeconds() / 60 / 60;\n    const fractionalMilliseconds = date_.getMilliseconds() / 1000 / 60 / 60;\n    const hours = date_.getHours() + fractionalMinutes + fractionalSeconds + fractionalMilliseconds;\n    const method = options?.roundingMethod ?? \"round\";\n    const roundingMethod = (0, _getRoundingMethod.getRoundingMethod)(method);\n    const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\n    date_.setHours(roundedHours, 0, 0, 0);\n    return date_;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = roundToNearestHours;\n});","lineCount":73,"map":[[7,2,1,0],[7,6,1,0,"_getRoundingMethod"],[7,24,1,0],[7,27,1,0,"require"],[7,34,1,0],[7,35,1,0,"_dependencyMap"],[7,49,1,0],[8,2,2,0],[8,6,2,0,"_constructFrom"],[8,20,2,0],[8,23,2,0,"require"],[8,30,2,0],[8,31,2,0,"_dependencyMap"],[8,45,2,0],[9,2,3,0],[9,6,3,0,"_toDate"],[9,13,3,0],[9,16,3,0,"require"],[9,23,3,0],[9,24,3,0,"_dependencyMap"],[9,38,3,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[14,2,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,2,51,7],[56,11,51,16,"roundToNearestHours"],[56,30,51,35,"roundToNearestHours"],[56,31,51,36,"date"],[56,35,51,40],[56,37,51,42,"options"],[56,44,51,49],[56,46,51,51],[57,4,52,2],[57,10,52,8,"nearestTo"],[57,19,52,17],[57,22,52,20,"options"],[57,29,52,27],[57,31,52,29,"nearestTo"],[57,40,52,38],[57,44,52,42],[57,45,52,43],[58,4,54,2],[58,8,54,6,"nearestTo"],[58,17,54,15],[58,20,54,18],[58,21,54,19],[58,25,54,23,"nearestTo"],[58,34,54,32],[58,37,54,35],[58,39,54,37],[58,41,55,4],[58,48,55,11],[58,52,55,11,"constructFrom"],[58,80,55,24],[58,82,55,25,"options"],[58,89,55,32],[58,91,55,34,"in"],[58,93,55,36],[58,97,55,40,"date"],[58,101,55,44],[58,103,55,46,"NaN"],[58,106,55,49],[58,107,55,50],[59,4,57,2],[59,10,57,8,"date_"],[59,15,57,13],[59,18,57,16],[59,22,57,16,"toDate"],[59,36,57,22],[59,38,57,23,"date"],[59,42,57,27],[59,44,57,29,"options"],[59,51,57,36],[59,53,57,38,"in"],[59,55,57,40],[59,56,57,41],[60,4,58,2],[60,10,58,8,"fractionalMinutes"],[60,27,58,25],[60,30,58,28,"date_"],[60,35,58,33],[60,36,58,34,"getMinutes"],[60,46,58,44],[60,47,58,45],[60,48,58,46],[60,51,58,49],[60,53,58,51],[61,4,59,2],[61,10,59,8,"fractionalSeconds"],[61,27,59,25],[61,30,59,28,"date_"],[61,35,59,33],[61,36,59,34,"getSeconds"],[61,46,59,44],[61,47,59,45],[61,48,59,46],[61,51,59,49],[61,53,59,51],[61,56,59,54],[61,58,59,56],[62,4,60,2],[62,10,60,8,"fractionalMilliseconds"],[62,32,60,30],[62,35,60,33,"date_"],[62,40,60,38],[62,41,60,39,"getMilliseconds"],[62,56,60,54],[62,57,60,55],[62,58,60,56],[62,61,60,59],[62,65,60,63],[62,68,60,66],[62,70,60,68],[62,73,60,71],[62,75,60,73],[63,4,61,2],[63,10,61,8,"hours"],[63,15,61,13],[63,18,62,4,"date_"],[63,23,62,9],[63,24,62,10,"getHours"],[63,32,62,18],[63,33,62,19],[63,34,62,20],[63,37,63,4,"fractionalMinutes"],[63,54,63,21],[63,57,64,4,"fractionalSeconds"],[63,74,64,21],[63,77,65,4,"fractionalMilliseconds"],[63,99,65,26],[64,4,67,2],[64,10,67,8,"method"],[64,16,67,14],[64,19,67,17,"options"],[64,26,67,24],[64,28,67,26,"roundingMethod"],[64,42,67,40],[64,46,67,44],[64,53,67,51],[65,4,68,2],[65,10,68,8,"roundingMethod"],[65,24,68,22],[65,27,68,25],[65,31,68,25,"getRoundingMethod"],[65,67,68,42],[65,69,68,43,"method"],[65,75,68,49],[65,76,68,50],[66,4,70,2],[66,10,70,8,"roundedHours"],[66,22,70,20],[66,25,70,23,"roundingMethod"],[66,39,70,37],[66,40,70,38,"hours"],[66,45,70,43],[66,48,70,46,"nearestTo"],[66,57,70,55],[66,58,70,56],[66,61,70,59,"nearestTo"],[66,70,70,68],[67,4,72,2,"date_"],[67,9,72,7],[67,10,72,8,"setHours"],[67,18,72,16],[67,19,72,17,"roundedHours"],[67,31,72,29],[67,33,72,31],[67,34,72,32],[67,36,72,34],[67,37,72,35],[67,39,72,37],[67,40,72,38],[67,41,72,39],[68,4,73,2],[68,11,73,9,"date_"],[68,16,73,14],[69,2,74,0],[71,2,76,0],[72,2,76,0],[72,6,76,0,"_default"],[72,14,76,0],[72,17,76,0,"exports"],[72,24,76,0],[72,25,76,0,"default"],[72,32,76,0],[72,35,77,15,"roundToNearestHours"],[72,54,77,34],[73,0,77,34],[73,3]],"functionMap":{"names":["<global>","roundToNearestHours"],"mappings":"AAA;OCkD;CDuB"}},"type":"js/module"}]}