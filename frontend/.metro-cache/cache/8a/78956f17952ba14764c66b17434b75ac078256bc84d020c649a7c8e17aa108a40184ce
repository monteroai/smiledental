{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"]}},{"name":"./addQuarters.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":47,"index":112}}],"key":"J7VZrCZ/m6TQ//8mFrNkpjNI3Vc=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":113},"end":{"line":3,"column":51,"index":164}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./startOfQuarter.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":165},"end":{"line":4,"column":53,"index":218}}],"key":"aU/n5nvPF8kBieqP++QSiTpo2xI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachQuarterOfInterval = eachQuarterOfInterval;\n  var _normalizeInterval = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _addQuarters = require(_dependencyMap[1], \"./addQuarters.js\");\n  var _constructFrom = require(_dependencyMap[2], \"./constructFrom.js\");\n  var _startOfQuarter = require(_dependencyMap[3], \"./startOfQuarter.js\");\n  /**\n   * The {@link eachQuarterOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachQuarterOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of quarters within the specified time interval.\n   *\n   * @description\n   * Return the array of quarters within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval\n   * @param options - An object with options\n   *\n   * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n   *\n   * @example\n   * // Each quarter within interval 6 February 2014 - 10 August 2014:\n   * const result = eachQuarterOfInterval({\n   *   start: new Date(2014, 1, 6),\n   *   end: new Date(2014, 7, 10),\n   * })\n   * //=> [\n   * //   Wed Jan 01 2014 00:00:00,\n   * //   Tue Apr 01 2014 00:00:00,\n   * //   Tue Jul 01 2014 00:00:00,\n   * // ]\n   */\n  function eachQuarterOfInterval(interval, options) {\n    const {\n      start,\n      end\n    } = (0, _normalizeInterval.normalizeInterval)(options?.in, interval);\n    let reversed = +start > +end;\n    const endTime = reversed ? +(0, _startOfQuarter.startOfQuarter)(start) : +(0, _startOfQuarter.startOfQuarter)(end);\n    let date = reversed ? (0, _startOfQuarter.startOfQuarter)(end) : (0, _startOfQuarter.startOfQuarter)(start);\n    let step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    const dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _constructFrom.constructFrom)(start, date));\n      date = (0, _addQuarters.addQuarters)(date, step);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachQuarterOfInterval;\n});","lineCount":74,"map":[[7,2,1,0],[7,6,1,0,"_normalizeInterval"],[7,24,1,0],[7,27,1,0,"require"],[7,34,1,0],[7,35,1,0,"_dependencyMap"],[7,49,1,0],[8,2,2,0],[8,6,2,0,"_addQuarters"],[8,18,2,0],[8,21,2,0,"require"],[8,28,2,0],[8,29,2,0,"_dependencyMap"],[8,43,2,0],[9,2,3,0],[9,6,3,0,"_constructFrom"],[9,20,3,0],[9,23,3,0,"require"],[9,30,3,0],[9,31,3,0,"_dependencyMap"],[9,45,3,0],[10,2,4,0],[10,6,4,0,"_startOfQuarter"],[10,21,4,0],[10,24,4,0,"require"],[10,31,4,0],[10,32,4,0,"_dependencyMap"],[10,46,4,0],[11,2,6,0],[12,0,7,0],[13,0,8,0],[15,2,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[22,2,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,2,45,7],[50,11,45,16,"eachQuarterOfInterval"],[50,32,45,37,"eachQuarterOfInterval"],[50,33,45,38,"interval"],[50,41,45,46],[50,43,45,48,"options"],[50,50,45,55],[50,52,45,57],[51,4,46,2],[51,10,46,8],[52,6,46,10,"start"],[52,11,46,15],[53,6,46,17,"end"],[54,4,46,21],[54,5,46,22],[54,8,46,25],[54,12,46,25,"normalizeInterval"],[54,48,46,42],[54,50,46,43,"options"],[54,57,46,50],[54,59,46,52,"in"],[54,61,46,54],[54,63,46,56,"interval"],[54,71,46,64],[54,72,46,65],[55,4,48,2],[55,8,48,6,"reversed"],[55,16,48,14],[55,19,48,17],[55,20,48,18,"start"],[55,25,48,23],[55,28,48,26],[55,29,48,27,"end"],[55,32,48,30],[56,4,49,2],[56,10,49,8,"endTime"],[56,17,49,15],[56,20,49,18,"reversed"],[56,28,49,26],[56,31,49,29],[56,32,49,30],[56,36,49,30,"startOfQuarter"],[56,66,49,44],[56,68,49,45,"start"],[56,73,49,50],[56,74,49,51],[56,77,49,54],[56,78,49,55],[56,82,49,55,"startOfQuarter"],[56,112,49,69],[56,114,49,70,"end"],[56,117,49,73],[56,118,49,74],[57,4,50,2],[57,8,50,6,"date"],[57,12,50,10],[57,15,50,13,"reversed"],[57,23,50,21],[57,26,50,24],[57,30,50,24,"startOfQuarter"],[57,60,50,38],[57,62,50,39,"end"],[57,65,50,42],[57,66,50,43],[57,69,50,46],[57,73,50,46,"startOfQuarter"],[57,103,50,60],[57,105,50,61,"start"],[57,110,50,66],[57,111,50,67],[58,4,52,2],[58,8,52,6,"step"],[58,12,52,10],[58,15,52,13,"options"],[58,22,52,20],[58,24,52,22,"step"],[58,28,52,26],[58,32,52,30],[58,33,52,31],[59,4,53,2],[59,8,53,6],[59,9,53,7,"step"],[59,13,53,11],[59,15,53,13],[59,22,53,20],[59,24,53,22],[60,4,54,2],[60,8,54,6,"step"],[60,12,54,10],[60,15,54,13],[60,16,54,14],[60,18,54,16],[61,6,55,4,"step"],[61,10,55,8],[61,13,55,11],[61,14,55,12,"step"],[61,18,55,16],[62,6,56,4,"reversed"],[62,14,56,12],[62,17,56,15],[62,18,56,16,"reversed"],[62,26,56,24],[63,4,57,2],[64,4,59,2],[64,10,59,8,"dates"],[64,15,59,13],[64,18,59,16],[64,20,59,18],[65,4,61,2],[65,11,61,9],[65,12,61,10,"date"],[65,16,61,14],[65,20,61,18,"endTime"],[65,27,61,25],[65,29,61,27],[66,6,62,4,"dates"],[66,11,62,9],[66,12,62,10,"push"],[66,16,62,14],[66,17,62,15],[66,21,62,15,"constructFrom"],[66,49,62,28],[66,51,62,29,"start"],[66,56,62,34],[66,58,62,36,"date"],[66,62,62,40],[66,63,62,41],[66,64,62,42],[67,6,63,4,"date"],[67,10,63,8],[67,13,63,11],[67,17,63,11,"addQuarters"],[67,41,63,22],[67,43,63,23,"date"],[67,47,63,27],[67,49,63,29,"step"],[67,53,63,33],[67,54,63,34],[68,4,64,2],[69,4,66,2],[69,11,66,9,"reversed"],[69,19,66,17],[69,22,66,20,"dates"],[69,27,66,25],[69,28,66,26,"reverse"],[69,35,66,33],[69,36,66,34],[69,37,66,35],[69,40,66,38,"dates"],[69,45,66,43],[70,2,67,0],[72,2,69,0],[73,2,69,0],[73,6,69,0,"_default"],[73,14,69,0],[73,17,69,0,"exports"],[73,24,69,0],[73,25,69,0,"default"],[73,32,69,0],[73,35,70,15,"eachQuarterOfInterval"],[73,56,70,36],[74,0,70,36],[74,3]],"functionMap":{"names":["<global>","eachQuarterOfInterval"],"mappings":"AAA;OC4C;CDsB"}},"type":"js/module"}]}