{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.buildMatchFn = buildMatchFn;\n  function buildMatchFn(args) {\n    return (string, options = {}) => {\n      const width = options.width;\n      const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n      const matchResult = string.match(matchPattern);\n      if (!matchResult) {\n        return null;\n      }\n      const matchedString = matchResult[0];\n      const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n      const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, pattern => pattern.test(matchedString)) :\n      // [TODO] -- I challenge you to fix the type\n      findKey(parsePatterns, pattern => pattern.test(matchedString));\n      let value;\n      value = args.valueCallback ? args.valueCallback(key) : key;\n      value = options.valueCallback ?\n      // [TODO] -- I challenge you to fix the type\n      options.valueCallback(value) : value;\n      const rest = string.slice(matchedString.length);\n      return {\n        value,\n        rest\n      };\n    };\n  }\n  function findKey(object, predicate) {\n    for (const key in object) {\n      if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n  function findIndex(array, predicate) {\n    for (let key = 0; key < array.length; key++) {\n      if (predicate(array[key])) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n});","lineCount":47,"map":[[6,2,1,7],[6,11,1,16,"buildMatchFn"],[6,23,1,28,"buildMatchFn"],[6,24,1,29,"args"],[6,28,1,33],[6,30,1,35],[7,4,2,2],[7,11,2,9],[7,12,2,10,"string"],[7,18,2,16],[7,20,2,18,"options"],[7,27,2,25],[7,30,2,28],[7,31,2,29],[7,32,2,30],[7,37,2,35],[8,6,3,4],[8,12,3,10,"width"],[8,17,3,15],[8,20,3,18,"options"],[8,27,3,25],[8,28,3,26,"width"],[8,33,3,31],[9,6,5,4],[9,12,5,10,"matchPattern"],[9,24,5,22],[9,27,6,7,"width"],[9,32,6,12],[9,36,6,16,"args"],[9,40,6,20],[9,41,6,21,"matchPatterns"],[9,54,6,34],[9,55,6,35,"width"],[9,60,6,40],[9,61,6,41],[9,65,7,6,"args"],[9,69,7,10],[9,70,7,11,"matchPatterns"],[9,83,7,24],[9,84,7,25,"args"],[9,88,7,29],[9,89,7,30,"defaultMatchWidth"],[9,106,7,47],[9,107,7,48],[10,6,8,4],[10,12,8,10,"matchResult"],[10,23,8,21],[10,26,8,24,"string"],[10,32,8,30],[10,33,8,31,"match"],[10,38,8,36],[10,39,8,37,"matchPattern"],[10,51,8,49],[10,52,8,50],[11,6,10,4],[11,10,10,8],[11,11,10,9,"matchResult"],[11,22,10,20],[11,24,10,22],[12,8,11,6],[12,15,11,13],[12,19,11,17],[13,6,12,4],[14,6,13,4],[14,12,13,10,"matchedString"],[14,25,13,23],[14,28,13,26,"matchResult"],[14,39,13,37],[14,40,13,38],[14,41,13,39],[14,42,13,40],[15,6,15,4],[15,12,15,10,"parsePatterns"],[15,25,15,23],[15,28,16,7,"width"],[15,33,16,12],[15,37,16,16,"args"],[15,41,16,20],[15,42,16,21,"parsePatterns"],[15,55,16,34],[15,56,16,35,"width"],[15,61,16,40],[15,62,16,41],[15,66,17,6,"args"],[15,70,17,10],[15,71,17,11,"parsePatterns"],[15,84,17,24],[15,85,17,25,"args"],[15,89,17,29],[15,90,17,30,"defaultParseWidth"],[15,107,17,47],[15,108,17,48],[16,6,19,4],[16,12,19,10,"key"],[16,15,19,13],[16,18,19,16,"Array"],[16,23,19,21],[16,24,19,22,"isArray"],[16,31,19,29],[16,32,19,30,"parsePatterns"],[16,45,19,43],[16,46,19,44],[16,49,20,8,"findIndex"],[16,58,20,17],[16,59,20,18,"parsePatterns"],[16,72,20,31],[16,74,20,34,"pattern"],[16,81,20,41],[16,85,20,46,"pattern"],[16,92,20,53],[16,93,20,54,"test"],[16,97,20,58],[16,98,20,59,"matchedString"],[16,111,20,72],[16,112,20,73],[16,113,20,74],[17,6,21,8],[18,6,22,8,"findKey"],[18,13,22,15],[18,14,22,16,"parsePatterns"],[18,27,22,29],[18,29,22,32,"pattern"],[18,36,22,39],[18,40,22,44,"pattern"],[18,47,22,51],[18,48,22,52,"test"],[18,52,22,56],[18,53,22,57,"matchedString"],[18,66,22,70],[18,67,22,71],[18,68,22,72],[19,6,24,4],[19,10,24,8,"value"],[19,15,24,13],[20,6,26,4,"value"],[20,11,26,9],[20,14,26,12,"args"],[20,18,26,16],[20,19,26,17,"valueCallback"],[20,32,26,30],[20,35,26,33,"args"],[20,39,26,37],[20,40,26,38,"valueCallback"],[20,53,26,51],[20,54,26,52,"key"],[20,57,26,55],[20,58,26,56],[20,61,26,59,"key"],[20,64,26,62],[21,6,27,4,"value"],[21,11,27,9],[21,14,27,12,"options"],[21,21,27,19],[21,22,27,20,"valueCallback"],[21,35,27,33],[22,6,28,8],[23,6,29,8,"options"],[23,13,29,15],[23,14,29,16,"valueCallback"],[23,27,29,29],[23,28,29,30,"value"],[23,33,29,35],[23,34,29,36],[23,37,30,8,"value"],[23,42,30,13],[24,6,32,4],[24,12,32,10,"rest"],[24,16,32,14],[24,19,32,17,"string"],[24,25,32,23],[24,26,32,24,"slice"],[24,31,32,29],[24,32,32,30,"matchedString"],[24,45,32,43],[24,46,32,44,"length"],[24,52,32,50],[24,53,32,51],[25,6,34,4],[25,13,34,11],[26,8,34,13,"value"],[26,13,34,18],[27,8,34,20,"rest"],[28,6,34,25],[28,7,34,26],[29,4,35,2],[29,5,35,3],[30,2,36,0],[31,2,38,0],[31,11,38,9,"findKey"],[31,18,38,16,"findKey"],[31,19,38,17,"object"],[31,25,38,23],[31,27,38,25,"predicate"],[31,36,38,34],[31,38,38,36],[32,4,39,2],[32,9,39,7],[32,15,39,13,"key"],[32,18,39,16],[32,22,39,20,"object"],[32,28,39,26],[32,30,39,28],[33,6,40,4],[33,10,41,6,"Object"],[33,16,41,12],[33,17,41,13,"prototype"],[33,26,41,22],[33,27,41,23,"hasOwnProperty"],[33,41,41,37],[33,42,41,38,"call"],[33,46,41,42],[33,47,41,43,"object"],[33,53,41,49],[33,55,41,51,"key"],[33,58,41,54],[33,59,41,55],[33,63,42,6,"predicate"],[33,72,42,15],[33,73,42,16,"object"],[33,79,42,22],[33,80,42,23,"key"],[33,83,42,26],[33,84,42,27],[33,85,42,28],[33,87,43,6],[34,8,44,6],[34,15,44,13,"key"],[34,18,44,16],[35,6,45,4],[36,4,46,2],[37,4,47,2],[37,11,47,9,"undefined"],[37,20,47,18],[38,2,48,0],[39,2,50,0],[39,11,50,9,"findIndex"],[39,20,50,18,"findIndex"],[39,21,50,19,"array"],[39,26,50,24],[39,28,50,26,"predicate"],[39,37,50,35],[39,39,50,37],[40,4,51,2],[40,9,51,7],[40,13,51,11,"key"],[40,16,51,14],[40,19,51,17],[40,20,51,18],[40,22,51,20,"key"],[40,25,51,23],[40,28,51,26,"array"],[40,33,51,31],[40,34,51,32,"length"],[40,40,51,38],[40,42,51,40,"key"],[40,45,51,43],[40,47,51,45],[40,49,51,47],[41,6,52,4],[41,10,52,8,"predicate"],[41,19,52,17],[41,20,52,18,"array"],[41,25,52,23],[41,26,52,24,"key"],[41,29,52,27],[41,30,52,28],[41,31,52,29],[41,33,52,31],[42,8,53,6],[42,15,53,13,"key"],[42,18,53,16],[43,6,54,4],[44,4,55,2],[45,4,56,2],[45,11,56,9,"undefined"],[45,20,56,18],[46,2,57,0],[47,0,57,1],[47,3]],"functionMap":{"names":["<global>","buildMatchFn","<anonymous>","findIndex$argument_1","findKey$argument_1","findKey","findIndex"],"mappings":"AAA,OC;SCC;iCCkB,wCD;+BEE,wCF;GDa;CDC;AKE;CLU;AME;CNO"}},"type":"js/module"}]}