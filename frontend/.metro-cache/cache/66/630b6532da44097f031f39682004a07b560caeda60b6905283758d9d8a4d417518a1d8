{"dependencies":[{"name":"./_lib/defaultLocale.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"pt9gPO2ve6GSRFbXPAQkm4R9a2w=","exportNames":["*"]}},{"name":"./_lib/defaultOptions.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":61,"index":118}}],"key":"RLyj7w3ZPZGGUSjkcz/7nwwn2xo=","exportNames":["*"]}},{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":64,"index":183}}],"key":"LkiOAV1LQTQ7MnwpzKKtm1nDXGQ=","exportNames":["*"]}},{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":92,"index":276}}],"key":"AyqjCuTamFHRMXjptSd4N6rS1NE=","exportNames":["*"]}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":277},"end":{"line":5,"column":58,"index":335}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./compareAsc.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":336},"end":{"line":6,"column":45,"index":381}}],"key":"0qIXq/JoGP2oJkpZUgvMj3rdXHw=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.formatDistanceStrict = formatDistanceStrict;\n  var _defaultLocale = require(_dependencyMap[0], \"./_lib/defaultLocale.js\");\n  var _defaultOptions = require(_dependencyMap[1], \"./_lib/defaultOptions.js\");\n  var _getRoundingMethod = require(_dependencyMap[2], \"./_lib/getRoundingMethod.js\");\n  var _getTimezoneOffsetInMilliseconds = require(_dependencyMap[3], \"./_lib/getTimezoneOffsetInMilliseconds.js\");\n  var _normalizeDates = require(_dependencyMap[4], \"./_lib/normalizeDates.js\");\n  var _compareAsc = require(_dependencyMap[5], \"./compareAsc.js\");\n  var _constants = require(_dependencyMap[6], \"./constants.js\");\n  /**\n   * The {@link formatDistanceStrict} function options.\n   */\n\n  /**\n   * The unit used to format the distance in {@link formatDistanceStrict}.\n   */\n\n  /**\n   * @name formatDistanceStrict\n   * @category Common Helpers\n   * @summary Return the distance between the given dates in words.\n   *\n   * @description\n   * Return the distance between the given dates in words, using strict units.\n   * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n   * 'less than' and the like.\n   *\n   * | Distance between dates | Result              |\n   * |------------------------|---------------------|\n   * | 0 ... 59 secs          | [0..59] seconds     |\n   * | 1 ... 59 mins          | [1..59] minutes     |\n   * | 1 ... 23 hrs           | [1..23] hours       |\n   * | 1 ... 29 days          | [1..29] days        |\n   * | 1 ... 11 months        | [1..11] months      |\n   * | 1 ... N years          | [1..N]  years       |\n   *\n   * @param laterDate - The date\n   * @param earlierDate - The date to compare with\n   * @param options - An object with options\n   *\n   * @returns The distance in words\n   *\n   * @throws `date` must not be Invalid Date\n   * @throws `baseDate` must not be Invalid Date\n   * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n   * @throws `options.locale` must contain `formatDistance` property\n   *\n   * @example\n   * // What is the distance between 2 July 2014 and 1 January 2015?\n   * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n   * //=> '6 months'\n   *\n   * @example\n   * // What is the distance between 1 January 2015 00:00:15\n   * // and 1 January 2015 00:00:00?\n   * const result = formatDistanceStrict(\n   *   new Date(2015, 0, 1, 0, 0, 15),\n   *   new Date(2015, 0, 1, 0, 0, 0)\n   * )\n   * //=> '15 seconds'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, with a suffix?\n   * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n   *   addSuffix: true\n   * })\n   * //=> '1 year ago'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, in minutes?\n   * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n   *   unit: 'minute'\n   * })\n   * //=> '525600 minutes'\n   *\n   * @example\n   * // What is the distance from 1 January 2015\n   * // to 28 January 2015, in months, rounded up?\n   * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n   *   unit: 'month',\n   *   roundingMethod: 'ceil'\n   * })\n   * //=> '1 month'\n   *\n   * @example\n   * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n   * import { eoLocale } from 'date-fns/locale/eo'\n   * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n   *   locale: eoLocale\n   * })\n   * //=> '1 jaro'\n   */\n\n  function formatDistanceStrict(laterDate, earlierDate, options) {\n    const defaultOptions = (0, _defaultOptions.getDefaultOptions)();\n    const locale = options?.locale ?? defaultOptions.locale ?? _defaultLocale.defaultLocale;\n    const comparison = (0, _compareAsc.compareAsc)(laterDate, earlierDate);\n    if (isNaN(comparison)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    const localizeOptions = Object.assign({}, options, {\n      addSuffix: options?.addSuffix,\n      comparison: comparison\n    });\n    const [laterDate_, earlierDate_] = (0, _normalizeDates.normalizeDates)(options?.in, ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]));\n    const roundingMethod = (0, _getRoundingMethod.getRoundingMethod)(options?.roundingMethod ?? \"round\");\n    const milliseconds = earlierDate_.getTime() - laterDate_.getTime();\n    const minutes = milliseconds / _constants.millisecondsInMinute;\n    const timezoneOffset = (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(earlierDate_) - (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(laterDate_);\n\n    // Use DST-normalized difference in minutes for years, months and days;\n    // use regular difference in minutes for hours, minutes and seconds.\n    const dstNormalizedMinutes = (milliseconds - timezoneOffset) / _constants.millisecondsInMinute;\n    const defaultUnit = options?.unit;\n    let unit;\n    if (!defaultUnit) {\n      if (minutes < 1) {\n        unit = \"second\";\n      } else if (minutes < 60) {\n        unit = \"minute\";\n      } else if (minutes < _constants.minutesInDay) {\n        unit = \"hour\";\n      } else if (dstNormalizedMinutes < _constants.minutesInMonth) {\n        unit = \"day\";\n      } else if (dstNormalizedMinutes < _constants.minutesInYear) {\n        unit = \"month\";\n      } else {\n        unit = \"year\";\n      }\n    } else {\n      unit = defaultUnit;\n    }\n\n    // 0 up to 60 seconds\n    if (unit === \"second\") {\n      const seconds = roundingMethod(milliseconds / 1000);\n      return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n      // 1 up to 60 mins\n    } else if (unit === \"minute\") {\n      const roundedMinutes = roundingMethod(minutes);\n      return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n      // 1 up to 24 hours\n    } else if (unit === \"hour\") {\n      const hours = roundingMethod(minutes / 60);\n      return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n      // 1 up to 30 days\n    } else if (unit === \"day\") {\n      const days = roundingMethod(dstNormalizedMinutes / _constants.minutesInDay);\n      return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n      // 1 up to 12 months\n    } else if (unit === \"month\") {\n      const months = roundingMethod(dstNormalizedMinutes / _constants.minutesInMonth);\n      return months === 12 && defaultUnit !== \"month\" ? locale.formatDistance(\"xYears\", 1, localizeOptions) : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n      // 1 year up to max Date\n    } else {\n      const years = roundingMethod(dstNormalizedMinutes / _constants.minutesInYear);\n      return locale.formatDistance(\"xYears\", years, localizeOptions);\n    }\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = formatDistanceStrict;\n});","lineCount":174,"map":[[7,2,1,0],[7,6,1,0,"_defaultLocale"],[7,20,1,0],[7,23,1,0,"require"],[7,30,1,0],[7,31,1,0,"_dependencyMap"],[7,45,1,0],[8,2,2,0],[8,6,2,0,"_defaultOptions"],[8,21,2,0],[8,24,2,0,"require"],[8,31,2,0],[8,32,2,0,"_dependencyMap"],[8,46,2,0],[9,2,3,0],[9,6,3,0,"_getRoundingMethod"],[9,24,3,0],[9,27,3,0,"require"],[9,34,3,0],[9,35,3,0,"_dependencyMap"],[9,49,3,0],[10,2,4,0],[10,6,4,0,"_getTimezoneOffsetInMilliseconds"],[10,38,4,0],[10,41,4,0,"require"],[10,48,4,0],[10,49,4,0,"_dependencyMap"],[10,63,4,0],[11,2,5,0],[11,6,5,0,"_normalizeDates"],[11,21,5,0],[11,24,5,0,"require"],[11,31,5,0],[11,32,5,0,"_dependencyMap"],[11,46,5,0],[12,2,6,0],[12,6,6,0,"_compareAsc"],[12,17,6,0],[12,20,6,0,"require"],[12,27,6,0],[12,28,6,0,"_dependencyMap"],[12,42,6,0],[13,2,7,0],[13,6,7,0,"_constants"],[13,16,7,0],[13,19,7,0,"require"],[13,26,7,0],[13,27,7,0,"_dependencyMap"],[13,41,7,0],[14,2,14,0],[15,0,15,0],[16,0,16,0],[18,2,18,0],[19,0,19,0],[20,0,20,0],[22,2,22,0],[23,0,23,0],[24,0,24,0],[25,0,25,0],[26,0,26,0],[27,0,27,0],[28,0,28,0],[29,0,29,0],[30,0,30,0],[31,0,31,0],[32,0,32,0],[33,0,33,0],[34,0,34,0],[35,0,35,0],[36,0,36,0],[37,0,37,0],[38,0,38,0],[39,0,39,0],[40,0,40,0],[41,0,41,0],[42,0,42,0],[43,0,43,0],[44,0,44,0],[45,0,45,0],[46,0,46,0],[47,0,47,0],[48,0,48,0],[49,0,49,0],[50,0,50,0],[51,0,51,0],[52,0,52,0],[53,0,53,0],[54,0,54,0],[55,0,55,0],[56,0,56,0],[57,0,57,0],[58,0,58,0],[59,0,59,0],[60,0,60,0],[61,0,61,0],[62,0,62,0],[63,0,63,0],[64,0,64,0],[65,0,65,0],[66,0,66,0],[67,0,67,0],[68,0,68,0],[69,0,69,0],[70,0,70,0],[71,0,71,0],[72,0,72,0],[73,0,73,0],[74,0,74,0],[75,0,75,0],[76,0,76,0],[77,0,77,0],[78,0,78,0],[79,0,79,0],[80,0,80,0],[81,0,81,0],[82,0,82,0],[83,0,83,0],[84,0,84,0],[85,0,85,0],[86,0,86,0],[87,0,87,0],[88,0,88,0],[89,0,89,0],[90,0,90,0],[91,0,91,0],[92,0,92,0],[93,0,93,0],[94,0,94,0],[95,0,95,0],[96,0,96,0],[97,0,97,0],[98,0,98,0],[100,2,100,7],[100,11,100,16,"formatDistanceStrict"],[100,31,100,36,"formatDistanceStrict"],[100,32,100,37,"laterDate"],[100,41,100,46],[100,43,100,48,"earlierDate"],[100,54,100,59],[100,56,100,61,"options"],[100,63,100,68],[100,65,100,70],[101,4,101,2],[101,10,101,8,"defaultOptions"],[101,24,101,22],[101,27,101,25],[101,31,101,25,"getDefaultOptions"],[101,64,101,42],[101,66,101,43],[101,67,101,44],[102,4,102,2],[102,10,102,8,"locale"],[102,16,102,14],[102,19,102,17,"options"],[102,26,102,24],[102,28,102,26,"locale"],[102,34,102,32],[102,38,102,36,"defaultOptions"],[102,52,102,50],[102,53,102,51,"locale"],[102,59,102,57],[102,63,102,61,"defaultLocale"],[102,91,102,74],[103,4,104,2],[103,10,104,8,"comparison"],[103,20,104,18],[103,23,104,21],[103,27,104,21,"compareAsc"],[103,49,104,31],[103,51,104,32,"laterDate"],[103,60,104,41],[103,62,104,43,"earlierDate"],[103,73,104,54],[103,74,104,55],[104,4,106,2],[104,8,106,6,"isNaN"],[104,13,106,11],[104,14,106,12,"comparison"],[104,24,106,22],[104,25,106,23],[104,27,106,25],[105,6,107,4],[105,12,107,10],[105,16,107,14,"RangeError"],[105,26,107,24],[105,27,107,25],[105,47,107,45],[105,48,107,46],[106,4,108,2],[107,4,110,2],[107,10,110,8,"localizeOptions"],[107,25,110,23],[107,28,110,26,"Object"],[107,34,110,32],[107,35,110,33,"assign"],[107,41,110,39],[107,42,110,40],[107,43,110,41],[107,44,110,42],[107,46,110,44,"options"],[107,53,110,51],[107,55,110,53],[108,6,111,4,"addSuffix"],[108,15,111,13],[108,17,111,15,"options"],[108,24,111,22],[108,26,111,24,"addSuffix"],[108,35,111,33],[109,6,112,4,"comparison"],[109,16,112,14],[109,18,112,16,"comparison"],[110,4,113,2],[110,5,113,3],[110,6,113,4],[111,4,115,2],[111,10,115,8],[111,11,115,9,"laterDate_"],[111,21,115,19],[111,23,115,21,"earlierDate_"],[111,35,115,33],[111,36,115,34],[111,39,115,37],[111,43,115,37,"normalizeDates"],[111,73,115,51],[111,75,116,4,"options"],[111,82,116,11],[111,84,116,13,"in"],[111,86,116,15],[111,88,117,4],[111,92,117,8,"comparison"],[111,102,117,18],[111,105,117,21],[111,106,117,22],[111,109,117,25],[111,110,117,26,"earlierDate"],[111,121,117,37],[111,123,117,39,"laterDate"],[111,132,117,48],[111,133,117,49],[111,136,117,52],[111,137,117,53,"laterDate"],[111,146,117,62],[111,148,117,64,"earlierDate"],[111,159,117,75],[111,160,117,76],[111,161,118,2],[111,162,118,3],[112,4,120,2],[112,10,120,8,"roundingMethod"],[112,24,120,22],[112,27,120,25],[112,31,120,25,"getRoundingMethod"],[112,67,120,42],[112,69,120,43,"options"],[112,76,120,50],[112,78,120,52,"roundingMethod"],[112,92,120,66],[112,96,120,70],[112,103,120,77],[112,104,120,78],[113,4,122,2],[113,10,122,8,"milliseconds"],[113,22,122,20],[113,25,122,23,"earlierDate_"],[113,37,122,35],[113,38,122,36,"getTime"],[113,45,122,43],[113,46,122,44],[113,47,122,45],[113,50,122,48,"laterDate_"],[113,60,122,58],[113,61,122,59,"getTime"],[113,68,122,66],[113,69,122,67],[113,70,122,68],[114,4,123,2],[114,10,123,8,"minutes"],[114,17,123,15],[114,20,123,18,"milliseconds"],[114,32,123,30],[114,35,123,33,"millisecondsInMinute"],[114,66,123,53],[115,4,125,2],[115,10,125,8,"timezoneOffset"],[115,24,125,22],[115,27,126,4],[115,31,126,4,"getTimezoneOffsetInMilliseconds"],[115,95,126,35],[115,97,126,36,"earlierDate_"],[115,109,126,48],[115,110,126,49],[115,113,127,4],[115,117,127,4,"getTimezoneOffsetInMilliseconds"],[115,181,127,35],[115,183,127,36,"laterDate_"],[115,193,127,46],[115,194,127,47],[117,4,129,2],[118,4,130,2],[119,4,131,2],[119,10,131,8,"dstNormalizedMinutes"],[119,30,131,28],[119,33,132,4],[119,34,132,5,"milliseconds"],[119,46,132,17],[119,49,132,20,"timezoneOffset"],[119,63,132,34],[119,67,132,38,"millisecondsInMinute"],[119,98,132,58],[120,4,134,2],[120,10,134,8,"defaultUnit"],[120,21,134,19],[120,24,134,22,"options"],[120,31,134,29],[120,33,134,31,"unit"],[120,37,134,35],[121,4,135,2],[121,8,135,6,"unit"],[121,12,135,10],[122,4,136,2],[122,8,136,6],[122,9,136,7,"defaultUnit"],[122,20,136,18],[122,22,136,20],[123,6,137,4],[123,10,137,8,"minutes"],[123,17,137,15],[123,20,137,18],[123,21,137,19],[123,23,137,21],[124,8,138,6,"unit"],[124,12,138,10],[124,15,138,13],[124,23,138,21],[125,6,139,4],[125,7,139,5],[125,13,139,11],[125,17,139,15,"minutes"],[125,24,139,22],[125,27,139,25],[125,29,139,27],[125,31,139,29],[126,8,140,6,"unit"],[126,12,140,10],[126,15,140,13],[126,23,140,21],[127,6,141,4],[127,7,141,5],[127,13,141,11],[127,17,141,15,"minutes"],[127,24,141,22],[127,27,141,25,"minutesInDay"],[127,50,141,37],[127,52,141,39],[128,8,142,6,"unit"],[128,12,142,10],[128,15,142,13],[128,21,142,19],[129,6,143,4],[129,7,143,5],[129,13,143,11],[129,17,143,15,"dstNormalizedMinutes"],[129,37,143,35],[129,40,143,38,"minutesInMonth"],[129,65,143,52],[129,67,143,54],[130,8,144,6,"unit"],[130,12,144,10],[130,15,144,13],[130,20,144,18],[131,6,145,4],[131,7,145,5],[131,13,145,11],[131,17,145,15,"dstNormalizedMinutes"],[131,37,145,35],[131,40,145,38,"minutesInYear"],[131,64,145,51],[131,66,145,53],[132,8,146,6,"unit"],[132,12,146,10],[132,15,146,13],[132,22,146,20],[133,6,147,4],[133,7,147,5],[133,13,147,11],[134,8,148,6,"unit"],[134,12,148,10],[134,15,148,13],[134,21,148,19],[135,6,149,4],[136,4,150,2],[136,5,150,3],[136,11,150,9],[137,6,151,4,"unit"],[137,10,151,8],[137,13,151,11,"defaultUnit"],[137,24,151,22],[138,4,152,2],[140,4,154,2],[141,4,155,2],[141,8,155,6,"unit"],[141,12,155,10],[141,17,155,15],[141,25,155,23],[141,27,155,25],[142,6,156,4],[142,12,156,10,"seconds"],[142,19,156,17],[142,22,156,20,"roundingMethod"],[142,36,156,34],[142,37,156,35,"milliseconds"],[142,49,156,47],[142,52,156,50],[142,56,156,54],[142,57,156,55],[143,6,157,4],[143,13,157,11,"locale"],[143,19,157,17],[143,20,157,18,"formatDistance"],[143,34,157,32],[143,35,157,33],[143,45,157,43],[143,47,157,45,"seconds"],[143,54,157,52],[143,56,157,54,"localizeOptions"],[143,71,157,69],[143,72,157,70],[145,6,159,4],[146,4,160,2],[146,5,160,3],[146,11,160,9],[146,15,160,13,"unit"],[146,19,160,17],[146,24,160,22],[146,32,160,30],[146,34,160,32],[147,6,161,4],[147,12,161,10,"roundedMinutes"],[147,26,161,24],[147,29,161,27,"roundingMethod"],[147,43,161,41],[147,44,161,42,"minutes"],[147,51,161,49],[147,52,161,50],[148,6,162,4],[148,13,162,11,"locale"],[148,19,162,17],[148,20,162,18,"formatDistance"],[148,34,162,32],[148,35,162,33],[148,45,162,43],[148,47,162,45,"roundedMinutes"],[148,61,162,59],[148,63,162,61,"localizeOptions"],[148,78,162,76],[148,79,162,77],[150,6,164,4],[151,4,165,2],[151,5,165,3],[151,11,165,9],[151,15,165,13,"unit"],[151,19,165,17],[151,24,165,22],[151,30,165,28],[151,32,165,30],[152,6,166,4],[152,12,166,10,"hours"],[152,17,166,15],[152,20,166,18,"roundingMethod"],[152,34,166,32],[152,35,166,33,"minutes"],[152,42,166,40],[152,45,166,43],[152,47,166,45],[152,48,166,46],[153,6,167,4],[153,13,167,11,"locale"],[153,19,167,17],[153,20,167,18,"formatDistance"],[153,34,167,32],[153,35,167,33],[153,43,167,41],[153,45,167,43,"hours"],[153,50,167,48],[153,52,167,50,"localizeOptions"],[153,67,167,65],[153,68,167,66],[155,6,169,4],[156,4,170,2],[156,5,170,3],[156,11,170,9],[156,15,170,13,"unit"],[156,19,170,17],[156,24,170,22],[156,29,170,27],[156,31,170,29],[157,6,171,4],[157,12,171,10,"days"],[157,16,171,14],[157,19,171,17,"roundingMethod"],[157,33,171,31],[157,34,171,32,"dstNormalizedMinutes"],[157,54,171,52],[157,57,171,55,"minutesInDay"],[157,80,171,67],[157,81,171,68],[158,6,172,4],[158,13,172,11,"locale"],[158,19,172,17],[158,20,172,18,"formatDistance"],[158,34,172,32],[158,35,172,33],[158,42,172,40],[158,44,172,42,"days"],[158,48,172,46],[158,50,172,48,"localizeOptions"],[158,65,172,63],[158,66,172,64],[160,6,174,4],[161,4,175,2],[161,5,175,3],[161,11,175,9],[161,15,175,13,"unit"],[161,19,175,17],[161,24,175,22],[161,31,175,29],[161,33,175,31],[162,6,176,4],[162,12,176,10,"months"],[162,18,176,16],[162,21,176,19,"roundingMethod"],[162,35,176,33],[162,36,176,34,"dstNormalizedMinutes"],[162,56,176,54],[162,59,176,57,"minutesInMonth"],[162,84,176,71],[162,85,176,72],[163,6,177,4],[163,13,177,11,"months"],[163,19,177,17],[163,24,177,22],[163,26,177,24],[163,30,177,28,"defaultUnit"],[163,41,177,39],[163,46,177,44],[163,53,177,51],[163,56,178,8,"locale"],[163,62,178,14],[163,63,178,15,"formatDistance"],[163,77,178,29],[163,78,178,30],[163,86,178,38],[163,88,178,40],[163,89,178,41],[163,91,178,43,"localizeOptions"],[163,106,178,58],[163,107,178,59],[163,110,179,8,"locale"],[163,116,179,14],[163,117,179,15,"formatDistance"],[163,131,179,29],[163,132,179,30],[163,141,179,39],[163,143,179,41,"months"],[163,149,179,47],[163,151,179,49,"localizeOptions"],[163,166,179,64],[163,167,179,65],[165,6,181,4],[166,4,182,2],[166,5,182,3],[166,11,182,9],[167,6,183,4],[167,12,183,10,"years"],[167,17,183,15],[167,20,183,18,"roundingMethod"],[167,34,183,32],[167,35,183,33,"dstNormalizedMinutes"],[167,55,183,53],[167,58,183,56,"minutesInYear"],[167,82,183,69],[167,83,183,70],[168,6,184,4],[168,13,184,11,"locale"],[168,19,184,17],[168,20,184,18,"formatDistance"],[168,34,184,32],[168,35,184,33],[168,43,184,41],[168,45,184,43,"years"],[168,50,184,48],[168,52,184,50,"localizeOptions"],[168,67,184,65],[168,68,184,66],[169,4,185,2],[170,2,186,0],[172,2,188,0],[173,2,188,0],[173,6,188,0,"_default"],[173,14,188,0],[173,17,188,0,"exports"],[173,24,188,0],[173,25,188,0,"default"],[173,32,188,0],[173,35,189,15,"formatDistanceStrict"],[173,55,189,35],[174,0,189,35],[174,3]],"functionMap":{"names":["<global>","formatDistanceStrict"],"mappings":"AAA;OCmG;CDsF"}},"type":"js/module"}]}