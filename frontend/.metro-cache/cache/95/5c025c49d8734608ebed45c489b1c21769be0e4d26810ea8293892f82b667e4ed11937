{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachDayOfInterval = eachDayOfInterval;\n  var _normalizeInterval = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _constructFrom = require(_dependencyMap[1], \"./constructFrom.js\");\n  /**\n   * The {@link eachDayOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachDayOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachDayOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of dates within the specified time interval.\n   *\n   * @description\n   * Return the array of dates within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval.\n   * @param options - An object with options.\n   *\n   * @returns The array with starts of days from the day of the interval start to the day of the interval end\n   *\n   * @example\n   * // Each day between 6 October 2014 and 10 October 2014:\n   * const result = eachDayOfInterval({\n   *   start: new Date(2014, 9, 6),\n   *   end: new Date(2014, 9, 10)\n   * })\n   * //=> [\n   * //   Mon Oct 06 2014 00:00:00,\n   * //   Tue Oct 07 2014 00:00:00,\n   * //   Wed Oct 08 2014 00:00:00,\n   * //   Thu Oct 09 2014 00:00:00,\n   * //   Fri Oct 10 2014 00:00:00\n   * // ]\n   */\n  function eachDayOfInterval(interval, options) {\n    const {\n      start,\n      end\n    } = (0, _normalizeInterval.normalizeInterval)(options?.in, interval);\n    let reversed = +start > +end;\n    const endTime = reversed ? +start : +end;\n    const date = reversed ? end : start;\n    date.setHours(0, 0, 0, 0);\n    let step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    const dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _constructFrom.constructFrom)(start, date));\n      date.setDate(date.getDate() + step);\n      date.setHours(0, 0, 0, 0);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachDayOfInterval;\n});","lineCount":76,"map":[[7,2,1,0],[7,6,1,0,"_normalizeInterval"],[7,24,1,0],[7,27,1,0,"require"],[7,34,1,0],[7,35,1,0,"_dependencyMap"],[7,49,1,0],[8,2,2,0],[8,6,2,0,"_constructFrom"],[8,20,2,0],[8,23,2,0,"require"],[8,30,2,0],[8,31,2,0,"_dependencyMap"],[8,45,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[20,2,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,2,45,7],[50,11,45,16,"eachDayOfInterval"],[50,28,45,33,"eachDayOfInterval"],[50,29,45,34,"interval"],[50,37,45,42],[50,39,45,44,"options"],[50,46,45,51],[50,48,45,53],[51,4,46,2],[51,10,46,8],[52,6,46,10,"start"],[52,11,46,15],[53,6,46,17,"end"],[54,4,46,21],[54,5,46,22],[54,8,46,25],[54,12,46,25,"normalizeInterval"],[54,48,46,42],[54,50,46,43,"options"],[54,57,46,50],[54,59,46,52,"in"],[54,61,46,54],[54,63,46,56,"interval"],[54,71,46,64],[54,72,46,65],[55,4,48,2],[55,8,48,6,"reversed"],[55,16,48,14],[55,19,48,17],[55,20,48,18,"start"],[55,25,48,23],[55,28,48,26],[55,29,48,27,"end"],[55,32,48,30],[56,4,49,2],[56,10,49,8,"endTime"],[56,17,49,15],[56,20,49,18,"reversed"],[56,28,49,26],[56,31,49,29],[56,32,49,30,"start"],[56,37,49,35],[56,40,49,38],[56,41,49,39,"end"],[56,44,49,42],[57,4,50,2],[57,10,50,8,"date"],[57,14,50,12],[57,17,50,15,"reversed"],[57,25,50,23],[57,28,50,26,"end"],[57,31,50,29],[57,34,50,32,"start"],[57,39,50,37],[58,4,51,2,"date"],[58,8,51,6],[58,9,51,7,"setHours"],[58,17,51,15],[58,18,51,16],[58,19,51,17],[58,21,51,19],[58,22,51,20],[58,24,51,22],[58,25,51,23],[58,27,51,25],[58,28,51,26],[58,29,51,27],[59,4,53,2],[59,8,53,6,"step"],[59,12,53,10],[59,15,53,13,"options"],[59,22,53,20],[59,24,53,22,"step"],[59,28,53,26],[59,32,53,30],[59,33,53,31],[60,4,54,2],[60,8,54,6],[60,9,54,7,"step"],[60,13,54,11],[60,15,54,13],[60,22,54,20],[60,24,54,22],[61,4,55,2],[61,8,55,6,"step"],[61,12,55,10],[61,15,55,13],[61,16,55,14],[61,18,55,16],[62,6,56,4,"step"],[62,10,56,8],[62,13,56,11],[62,14,56,12,"step"],[62,18,56,16],[63,6,57,4,"reversed"],[63,14,57,12],[63,17,57,15],[63,18,57,16,"reversed"],[63,26,57,24],[64,4,58,2],[65,4,60,2],[65,10,60,8,"dates"],[65,15,60,13],[65,18,60,16],[65,20,60,18],[66,4,62,2],[66,11,62,9],[66,12,62,10,"date"],[66,16,62,14],[66,20,62,18,"endTime"],[66,27,62,25],[66,29,62,27],[67,6,63,4,"dates"],[67,11,63,9],[67,12,63,10,"push"],[67,16,63,14],[67,17,63,15],[67,21,63,15,"constructFrom"],[67,49,63,28],[67,51,63,29,"start"],[67,56,63,34],[67,58,63,36,"date"],[67,62,63,40],[67,63,63,41],[67,64,63,42],[68,6,64,4,"date"],[68,10,64,8],[68,11,64,9,"setDate"],[68,18,64,16],[68,19,64,17,"date"],[68,23,64,21],[68,24,64,22,"getDate"],[68,31,64,29],[68,32,64,30],[68,33,64,31],[68,36,64,34,"step"],[68,40,64,38],[68,41,64,39],[69,6,65,4,"date"],[69,10,65,8],[69,11,65,9,"setHours"],[69,19,65,17],[69,20,65,18],[69,21,65,19],[69,23,65,21],[69,24,65,22],[69,26,65,24],[69,27,65,25],[69,29,65,27],[69,30,65,28],[69,31,65,29],[70,4,66,2],[71,4,68,2],[71,11,68,9,"reversed"],[71,19,68,17],[71,22,68,20,"dates"],[71,27,68,25],[71,28,68,26,"reverse"],[71,35,68,33],[71,36,68,34],[71,37,68,35],[71,40,68,38,"dates"],[71,45,68,43],[72,2,69,0],[74,2,71,0],[75,2,71,0],[75,6,71,0,"_default"],[75,14,71,0],[75,17,71,0,"exports"],[75,24,71,0],[75,25,71,0,"default"],[75,32,71,0],[75,35,72,15,"eachDayOfInterval"],[75,52,72,32],[76,0,72,32],[76,3]],"functionMap":{"names":["<global>","eachDayOfInterval"],"mappings":"AAA;OC4C;CDwB"}},"type":"js/module"}]}