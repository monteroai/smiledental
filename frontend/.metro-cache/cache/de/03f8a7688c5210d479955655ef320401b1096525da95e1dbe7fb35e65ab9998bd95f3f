{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachYearOfInterval = eachYearOfInterval;\n  var _normalizeInterval = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _constructFrom = require(_dependencyMap[1], \"./constructFrom.js\");\n  /**\n   * The {@link eachYearOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachYearOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachYearOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of yearly timestamps within the specified time interval.\n   *\n   * @description\n   * Return the array of yearly timestamps within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval.\n   * @param options - An object with options.\n   *\n   * @returns The array with starts of yearly timestamps from the month of the interval start to the month of the interval end\n   *\n   * @example\n   * // Each year between 6 February 2014 and 10 August 2017:\n   * const result = eachYearOfInterval({\n   *   start: new Date(2014, 1, 6),\n   *   end: new Date(2017, 7, 10)\n   * })\n   * //=> [\n   * //   Wed Jan 01 2014 00:00:00,\n   * //   Thu Jan 01 2015 00:00:00,\n   * //   Fri Jan 01 2016 00:00:00,\n   * //   Sun Jan 01 2017 00:00:00\n   * // ]\n   */\n  function eachYearOfInterval(interval, options) {\n    const {\n      start,\n      end\n    } = (0, _normalizeInterval.normalizeInterval)(options?.in, interval);\n    let reversed = +start > +end;\n    const endTime = reversed ? +start : +end;\n    const date = reversed ? end : start;\n    date.setHours(0, 0, 0, 0);\n    date.setMonth(0, 1);\n    let step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    const dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _constructFrom.constructFrom)(start, date));\n      date.setFullYear(date.getFullYear() + step);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachYearOfInterval;\n});","lineCount":75,"map":[[7,2,1,0],[7,6,1,0,"_normalizeInterval"],[7,24,1,0],[7,27,1,0,"require"],[7,34,1,0],[7,35,1,0,"_dependencyMap"],[7,49,1,0],[8,2,2,0],[8,6,2,0,"_constructFrom"],[8,20,2,0],[8,23,2,0,"require"],[8,30,2,0],[8,31,2,0,"_dependencyMap"],[8,45,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[20,2,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,2,44,7],[49,11,44,16,"eachYearOfInterval"],[49,29,44,34,"eachYearOfInterval"],[49,30,44,35,"interval"],[49,38,44,43],[49,40,44,45,"options"],[49,47,44,52],[49,49,44,54],[50,4,45,2],[50,10,45,8],[51,6,45,10,"start"],[51,11,45,15],[52,6,45,17,"end"],[53,4,45,21],[53,5,45,22],[53,8,45,25],[53,12,45,25,"normalizeInterval"],[53,48,45,42],[53,50,45,43,"options"],[53,57,45,50],[53,59,45,52,"in"],[53,61,45,54],[53,63,45,56,"interval"],[53,71,45,64],[53,72,45,65],[54,4,47,2],[54,8,47,6,"reversed"],[54,16,47,14],[54,19,47,17],[54,20,47,18,"start"],[54,25,47,23],[54,28,47,26],[54,29,47,27,"end"],[54,32,47,30],[55,4,48,2],[55,10,48,8,"endTime"],[55,17,48,15],[55,20,48,18,"reversed"],[55,28,48,26],[55,31,48,29],[55,32,48,30,"start"],[55,37,48,35],[55,40,48,38],[55,41,48,39,"end"],[55,44,48,42],[56,4,49,2],[56,10,49,8,"date"],[56,14,49,12],[56,17,49,15,"reversed"],[56,25,49,23],[56,28,49,26,"end"],[56,31,49,29],[56,34,49,32,"start"],[56,39,49,37],[57,4,50,2,"date"],[57,8,50,6],[57,9,50,7,"setHours"],[57,17,50,15],[57,18,50,16],[57,19,50,17],[57,21,50,19],[57,22,50,20],[57,24,50,22],[57,25,50,23],[57,27,50,25],[57,28,50,26],[57,29,50,27],[58,4,51,2,"date"],[58,8,51,6],[58,9,51,7,"setMonth"],[58,17,51,15],[58,18,51,16],[58,19,51,17],[58,21,51,19],[58,22,51,20],[58,23,51,21],[59,4,53,2],[59,8,53,6,"step"],[59,12,53,10],[59,15,53,13,"options"],[59,22,53,20],[59,24,53,22,"step"],[59,28,53,26],[59,32,53,30],[59,33,53,31],[60,4,54,2],[60,8,54,6],[60,9,54,7,"step"],[60,13,54,11],[60,15,54,13],[60,22,54,20],[60,24,54,22],[61,4,55,2],[61,8,55,6,"step"],[61,12,55,10],[61,15,55,13],[61,16,55,14],[61,18,55,16],[62,6,56,4,"step"],[62,10,56,8],[62,13,56,11],[62,14,56,12,"step"],[62,18,56,16],[63,6,57,4,"reversed"],[63,14,57,12],[63,17,57,15],[63,18,57,16,"reversed"],[63,26,57,24],[64,4,58,2],[65,4,60,2],[65,10,60,8,"dates"],[65,15,60,13],[65,18,60,16],[65,20,60,18],[66,4,62,2],[66,11,62,9],[66,12,62,10,"date"],[66,16,62,14],[66,20,62,18,"endTime"],[66,27,62,25],[66,29,62,27],[67,6,63,4,"dates"],[67,11,63,9],[67,12,63,10,"push"],[67,16,63,14],[67,17,63,15],[67,21,63,15,"constructFrom"],[67,49,63,28],[67,51,63,29,"start"],[67,56,63,34],[67,58,63,36,"date"],[67,62,63,40],[67,63,63,41],[67,64,63,42],[68,6,64,4,"date"],[68,10,64,8],[68,11,64,9,"setFullYear"],[68,22,64,20],[68,23,64,21,"date"],[68,27,64,25],[68,28,64,26,"getFullYear"],[68,39,64,37],[68,40,64,38],[68,41,64,39],[68,44,64,42,"step"],[68,48,64,46],[68,49,64,47],[69,4,65,2],[70,4,67,2],[70,11,67,9,"reversed"],[70,19,67,17],[70,22,67,20,"dates"],[70,27,67,25],[70,28,67,26,"reverse"],[70,35,67,33],[70,36,67,34],[70,37,67,35],[70,40,67,38,"dates"],[70,45,67,43],[71,2,68,0],[73,2,70,0],[74,2,70,0],[74,6,70,0,"_default"],[74,14,70,0],[74,17,70,0,"exports"],[74,24,70,0],[74,25,70,0,"default"],[74,32,70,0],[74,35,71,15,"eachYearOfInterval"],[74,53,71,33],[75,0,71,33],[75,3]],"functionMap":{"names":["<global>","eachYearOfInterval"],"mappings":"AAA;OC2C;CDwB"}},"type":"js/module"}]}