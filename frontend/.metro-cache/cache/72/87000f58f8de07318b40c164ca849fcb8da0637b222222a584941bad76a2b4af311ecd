{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./startOfDay.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":45,"index":104}}],"key":"3NuIZRZJAEuB843QJJHZ3hLdJbc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.isSameDay = isSameDay;\n  var _normalizeDates = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  var _startOfDay = require(_dependencyMap[1], \"./startOfDay.js\");\n  /**\n   * The {@link isSameDay} function options.\n   */\n\n  /**\n   * @name isSameDay\n   * @category Day Helpers\n   * @summary Are the given dates in the same day (and year and month)?\n   *\n   * @description\n   * Are the given dates in the same day (and year and month)?\n   *\n   * @param laterDate - The first date to check\n   * @param earlierDate - The second date to check\n   * @param options - An object with options\n   *\n   * @returns The dates are in the same day (and year and month)\n   *\n   * @example\n   * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n   * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n   * //=> true\n   *\n   * @example\n   * // Are 4 September and 4 October in the same day?\n   * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n   * //=> false\n   *\n   * @example\n   * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n   * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n   * //=> false\n   */\n  function isSameDay(laterDate, earlierDate, options) {\n    const [dateLeft_, dateRight_] = (0, _normalizeDates.normalizeDates)(options?.in, laterDate, earlierDate);\n    return +(0, _startOfDay.startOfDay)(dateLeft_) === +(0, _startOfDay.startOfDay)(dateRight_);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = isSameDay;\n});","lineCount":49,"map":[[7,2,1,0],[7,6,1,0,"_normalizeDates"],[7,21,1,0],[7,24,1,0,"require"],[7,31,1,0],[7,32,1,0,"_dependencyMap"],[7,46,1,0],[8,2,2,0],[8,6,2,0,"_startOfDay"],[8,17,2,0],[8,20,2,0,"require"],[8,27,2,0],[8,28,2,0,"_dependencyMap"],[8,42,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,2,37,7],[42,11,37,16,"isSameDay"],[42,20,37,25,"isSameDay"],[42,21,37,26,"laterDate"],[42,30,37,35],[42,32,37,37,"earlierDate"],[42,43,37,48],[42,45,37,50,"options"],[42,52,37,57],[42,54,37,59],[43,4,38,2],[43,10,38,8],[43,11,38,9,"dateLeft_"],[43,20,38,18],[43,22,38,20,"dateRight_"],[43,32,38,30],[43,33,38,31],[43,36,38,34],[43,40,38,34,"normalizeDates"],[43,70,38,48],[43,72,39,4,"options"],[43,79,39,11],[43,81,39,13,"in"],[43,83,39,15],[43,85,40,4,"laterDate"],[43,94,40,13],[43,96,41,4,"earlierDate"],[43,107,42,2],[43,108,42,3],[44,4,43,2],[44,11,43,9],[44,12,43,10],[44,16,43,10,"startOfDay"],[44,38,43,20],[44,40,43,21,"dateLeft_"],[44,49,43,30],[44,50,43,31],[44,55,43,36],[44,56,43,37],[44,60,43,37,"startOfDay"],[44,82,43,47],[44,84,43,48,"dateRight_"],[44,94,43,58],[44,95,43,59],[45,2,44,0],[47,2,46,0],[48,2,46,0],[48,6,46,0,"_default"],[48,14,46,0],[48,17,46,0,"exports"],[48,24,46,0],[48,25,46,0,"default"],[48,32,46,0],[48,35,47,15,"isSameDay"],[48,44,47,24],[49,0,47,24],[49,3]],"functionMap":{"names":["<global>","isSameDay"],"mappings":"AAA;OCoC;CDO"}},"type":"js/module"}]}