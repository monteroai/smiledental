{"dependencies":[{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":92,"index":92}}],"key":"AyqjCuTamFHRMXjptSd4N6rS1NE=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":93},"end":{"line":2,"column":51,"index":144}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":145},"end":{"line":3,"column":37,"index":182}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\n  var _getTimezoneOffsetInMilliseconds = require(_dependencyMap[0], \"./_lib/getTimezoneOffsetInMilliseconds.js\");\n  var _constants = require(_dependencyMap[1], \"./constants.js\");\n  var _toDate = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * @name getOverlappingDaysInIntervals\n   * @category Interval Helpers\n   * @summary Get the number of days that overlap in two time intervals\n   *\n   * @description\n   * Get the number of days that overlap in two time intervals. It uses the time\n   * between dates to calculate the number of days, rounding it up to include\n   * partial days.\n   *\n   * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n   * result in 1.\n   *\n   * @param intervalLeft - The first interval to compare.\n   * @param intervalRight - The second interval to compare.\n   * @param options - An object with options\n   *\n   * @returns The number of days that overlap in two time intervals\n   *\n   * @example\n   * // For overlapping time intervals adds 1 for each started overlapping day:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n   * )\n   * //=> 3\n   *\n   * @example\n   * // For non-overlapping time intervals returns 0:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n   * )\n   * //=> 0\n   */\n\n  function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n    const [leftStart, leftEnd] = [+(0, _toDate.toDate)(intervalLeft.start), +(0, _toDate.toDate)(intervalLeft.end)].sort((a, b) => a - b);\n    const [rightStart, rightEnd] = [+(0, _toDate.toDate)(intervalRight.start), +(0, _toDate.toDate)(intervalRight.end)].sort((a, b) => a - b);\n\n    // Prevent NaN result if intervals don't overlap at all.\n    const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n    if (!isOverlapping) return 0;\n\n    // Remove the timezone offset to negate the DST effect on calculations.\n    const overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n    const left = overlapLeft - (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(overlapLeft);\n    const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n    const right = overlapRight - (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(overlapRight);\n\n    // Ceil the number to include partial days too.\n    return Math.ceil((right - left) / _constants.millisecondsInDay);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = getOverlappingDaysInIntervals;\n});","lineCount":66,"map":[[7,2,1,0],[7,6,1,0,"_getTimezoneOffsetInMilliseconds"],[7,38,1,0],[7,41,1,0,"require"],[7,48,1,0],[7,49,1,0,"_dependencyMap"],[7,63,1,0],[8,2,2,0],[8,6,2,0,"_constants"],[8,16,2,0],[8,19,2,0,"require"],[8,26,2,0],[8,27,2,0,"_dependencyMap"],[8,41,2,0],[9,2,3,0],[9,6,3,0,"_toDate"],[9,13,3,0],[9,16,3,0,"require"],[9,23,3,0],[9,24,3,0,"_dependencyMap"],[9,38,3,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[46,2,41,7],[46,11,41,16,"getOverlappingDaysInIntervals"],[46,40,41,45,"getOverlappingDaysInIntervals"],[46,41,41,46,"intervalLeft"],[46,53,41,58],[46,55,41,60,"intervalRight"],[46,68,41,73],[46,70,41,75],[47,4,42,2],[47,10,42,8],[47,11,42,9,"leftStart"],[47,20,42,18],[47,22,42,20,"leftEnd"],[47,29,42,27],[47,30,42,28],[47,33,42,31],[47,34,43,4],[47,35,43,5],[47,39,43,5,"toDate"],[47,53,43,11],[47,55,43,12,"intervalLeft"],[47,67,43,24],[47,68,43,25,"start"],[47,73,43,30],[47,74,43,31],[47,76,44,4],[47,77,44,5],[47,81,44,5,"toDate"],[47,95,44,11],[47,97,44,12,"intervalLeft"],[47,109,44,24],[47,110,44,25,"end"],[47,113,44,28],[47,114,44,29],[47,115,45,3],[47,116,45,4,"sort"],[47,120,45,8],[47,121,45,9],[47,122,45,10,"a"],[47,123,45,11],[47,125,45,13,"b"],[47,126,45,14],[47,131,45,19,"a"],[47,132,45,20],[47,135,45,23,"b"],[47,136,45,24],[47,137,45,25],[48,4,46,2],[48,10,46,8],[48,11,46,9,"rightStart"],[48,21,46,19],[48,23,46,21,"rightEnd"],[48,31,46,29],[48,32,46,30],[48,35,46,33],[48,36,47,4],[48,37,47,5],[48,41,47,5,"toDate"],[48,55,47,11],[48,57,47,12,"intervalRight"],[48,70,47,25],[48,71,47,26,"start"],[48,76,47,31],[48,77,47,32],[48,79,48,4],[48,80,48,5],[48,84,48,5,"toDate"],[48,98,48,11],[48,100,48,12,"intervalRight"],[48,113,48,25],[48,114,48,26,"end"],[48,117,48,29],[48,118,48,30],[48,119,49,3],[48,120,49,4,"sort"],[48,124,49,8],[48,125,49,9],[48,126,49,10,"a"],[48,127,49,11],[48,129,49,13,"b"],[48,130,49,14],[48,135,49,19,"a"],[48,136,49,20],[48,139,49,23,"b"],[48,140,49,24],[48,141,49,25],[50,4,51,2],[51,4,52,2],[51,10,52,8,"isOverlapping"],[51,23,52,21],[51,26,52,24,"leftStart"],[51,35,52,33],[51,38,52,36,"rightEnd"],[51,46,52,44],[51,50,52,48,"rightStart"],[51,60,52,58],[51,63,52,61,"leftEnd"],[51,70,52,68],[52,4,53,2],[52,8,53,6],[52,9,53,7,"isOverlapping"],[52,22,53,20],[52,24,53,22],[52,31,53,29],[52,32,53,30],[54,4,55,2],[55,4,56,2],[55,10,56,8,"overlapLeft"],[55,21,56,19],[55,24,56,22,"rightStart"],[55,34,56,32],[55,37,56,35,"leftStart"],[55,46,56,44],[55,49,56,47,"leftStart"],[55,58,56,56],[55,61,56,59,"rightStart"],[55,71,56,69],[56,4,57,2],[56,10,57,8,"left"],[56,14,57,12],[56,17,57,15,"overlapLeft"],[56,28,57,26],[56,31,57,29],[56,35,57,29,"getTimezoneOffsetInMilliseconds"],[56,99,57,60],[56,101,57,61,"overlapLeft"],[56,112,57,72],[56,113,57,73],[57,4,58,2],[57,10,58,8,"overlapRight"],[57,22,58,20],[57,25,58,23,"rightEnd"],[57,33,58,31],[57,36,58,34,"leftEnd"],[57,43,58,41],[57,46,58,44,"leftEnd"],[57,53,58,51],[57,56,58,54,"rightEnd"],[57,64,58,62],[58,4,59,2],[58,10,59,8,"right"],[58,15,59,13],[58,18,59,16,"overlapRight"],[58,30,59,28],[58,33,59,31],[58,37,59,31,"getTimezoneOffsetInMilliseconds"],[58,101,59,62],[58,103,59,63,"overlapRight"],[58,115,59,75],[58,116,59,76],[60,4,61,2],[61,4,62,2],[61,11,62,9,"Math"],[61,15,62,13],[61,16,62,14,"ceil"],[61,20,62,18],[61,21,62,19],[61,22,62,20,"right"],[61,27,62,25],[61,30,62,28,"left"],[61,34,62,32],[61,38,62,36,"millisecondsInDay"],[61,66,62,53],[61,67,62,54],[62,2,63,0],[64,2,65,0],[65,2,65,0],[65,6,65,0,"_default"],[65,14,65,0],[65,17,65,0,"exports"],[65,24,65,0],[65,25,65,0,"default"],[65,32,65,0],[65,35,66,15,"getOverlappingDaysInIntervals"],[65,64,66,44],[66,0,66,44],[66,3]],"functionMap":{"names":["<global>","getOverlappingDaysInIntervals","sort$argument_0"],"mappings":"AAA;OCwC;SCI,eD;SCI,eD;CDc"}},"type":"js/module"}]}