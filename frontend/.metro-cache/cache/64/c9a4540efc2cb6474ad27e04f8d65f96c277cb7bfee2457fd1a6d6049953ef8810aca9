{"dependencies":[{"name":"./startOfISOWeekYear.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":61,"index":61}}],"key":"X77L8nGP6Z9X4UBs3Gj0ppPEop0=","exportNames":["*"]}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":63},"end":{"line":3,"column":58,"index":121}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.isSameISOWeekYear = isSameISOWeekYear;\n  var _startOfISOWeekYear = require(_dependencyMap[0], \"./startOfISOWeekYear.js\");\n  var _normalizeDates = require(_dependencyMap[1], \"./_lib/normalizeDates.js\");\n  /**\n   * The {@link isSameISOWeekYear} function options.\n   */\n\n  /**\n   * @name isSameISOWeekYear\n   * @category ISO Week-Numbering Year Helpers\n   * @summary Are the given dates in the same ISO week-numbering year?\n   *\n   * @description\n   * Are the given dates in the same ISO week-numbering year?\n   *\n   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n   *\n   * @param laterDate - The first date to check\n   * @param earlierDate - The second date to check\n   * @param options - An object with options\n   *\n   * @returns The dates are in the same ISO week-numbering year\n   *\n   * @example\n   * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\n   * const result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\n   * //=> true\n   */\n  function isSameISOWeekYear(laterDate, earlierDate, options) {\n    const [laterDate_, earlierDate_] = (0, _normalizeDates.normalizeDates)(options?.in, laterDate, earlierDate);\n    return +(0, _startOfISOWeekYear.startOfISOWeekYear)(laterDate_) === +(0, _startOfISOWeekYear.startOfISOWeekYear)(earlierDate_);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = isSameISOWeekYear;\n});","lineCount":41,"map":[[7,2,1,0],[7,6,1,0,"_startOfISOWeekYear"],[7,25,1,0],[7,28,1,0,"require"],[7,35,1,0],[7,36,1,0,"_dependencyMap"],[7,50,1,0],[8,2,3,0],[8,6,3,0,"_normalizeDates"],[8,21,3,0],[8,24,3,0,"require"],[8,31,3,0],[8,32,3,0,"_dependencyMap"],[8,46,3,0],[9,2,5,0],[10,0,6,0],[11,0,7,0],[13,2,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,2,30,7],[34,11,30,16,"isSameISOWeekYear"],[34,28,30,33,"isSameISOWeekYear"],[34,29,30,34,"laterDate"],[34,38,30,43],[34,40,30,45,"earlierDate"],[34,51,30,56],[34,53,30,58,"options"],[34,60,30,65],[34,62,30,67],[35,4,31,2],[35,10,31,8],[35,11,31,9,"laterDate_"],[35,21,31,19],[35,23,31,21,"earlierDate_"],[35,35,31,33],[35,36,31,34],[35,39,31,37],[35,43,31,37,"normalizeDates"],[35,73,31,51],[35,75,32,4,"options"],[35,82,32,11],[35,84,32,13,"in"],[35,86,32,15],[35,88,33,4,"laterDate"],[35,97,33,13],[35,99,34,4,"earlierDate"],[35,110,35,2],[35,111,35,3],[36,4,36,2],[36,11,36,9],[36,12,36,10],[36,16,36,10,"startOfISOWeekYear"],[36,54,36,28],[36,56,36,29,"laterDate_"],[36,66,36,39],[36,67,36,40],[36,72,36,45],[36,73,36,46],[36,77,36,46,"startOfISOWeekYear"],[36,115,36,64],[36,117,36,65,"earlierDate_"],[36,129,36,77],[36,130,36,78],[37,2,37,0],[39,2,39,0],[40,2,39,0],[40,6,39,0,"_default"],[40,14,39,0],[40,17,39,0,"exports"],[40,24,39,0],[40,25,39,0,"default"],[40,32,39,0],[40,35,40,15,"isSameISOWeekYear"],[40,52,40,32],[41,0,40,32],[41,3]],"functionMap":{"names":["<global>","isSameISOWeekYear"],"mappings":"AAA;OC6B;CDO"}},"type":"js/module"}]}