{"dependencies":[{"name":"../Parser.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"CIJslq/MUqKep4ImmeyUTywuBTk=","exportNames":["*"]}},{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":40},"end":{"line":3,"column":76,"index":116}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.YearParser = void 0;\n  var _Parser = require(_dependencyMap[0], \"../Parser.js\");\n  var _utils = require(_dependencyMap[1], \"../utils.js\");\n  // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n  // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n  // |----------|-------|----|-------|-------|-------|\n  // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n  // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n  // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n  // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n  // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n  class YearParser extends _Parser.Parser {\n    priority = 130;\n    incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n    parse(dateString, token, match) {\n      const valueCallback = year => ({\n        year,\n        isTwoDigitYear: token === \"yy\"\n      });\n      switch (token) {\n        case \"y\":\n          return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);\n        case \"yo\":\n          return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n            unit: \"year\"\n          }), valueCallback);\n        default:\n          return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);\n      }\n    }\n    validate(_date, value) {\n      return value.isTwoDigitYear || value.year > 0;\n    }\n    set(date, flags, value) {\n      const currentYear = date.getFullYear();\n      if (value.isTwoDigitYear) {\n        const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);\n        date.setFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setHours(0, 0, 0, 0);\n        return date;\n      }\n      const year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setFullYear(year, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n  }\n  exports.YearParser = YearParser;\n});","lineCount":53,"map":[[6,2,1,0],[6,6,1,0,"_Parser"],[6,13,1,0],[6,16,1,0,"require"],[6,23,1,0],[6,24,1,0,"_dependencyMap"],[6,38,1,0],[7,2,3,0],[7,6,3,0,"_utils"],[7,12,3,0],[7,15,3,0,"require"],[7,22,3,0],[7,23,3,0,"_dependencyMap"],[7,37,3,0],[8,2,5,0],[9,2,6,0],[10,2,7,0],[11,2,8,0],[12,2,9,0],[13,2,10,0],[14,2,11,0],[15,2,12,0],[16,2,13,7],[16,8,13,13,"YearParser"],[16,18,13,23],[16,27,13,32,"Parser"],[16,41,13,38],[16,42,13,39],[17,4,14,2,"priority"],[17,12,14,10],[17,15,14,13],[17,18,14,16],[18,4,15,2,"incompatibleTokens"],[18,22,15,20],[18,25,15,23],[18,26,15,24],[18,29,15,27],[18,31,15,29],[18,34,15,32],[18,36,15,34],[18,39,15,37],[18,41,15,39],[18,44,15,42],[18,46,15,44],[18,49,15,47],[18,51,15,49],[18,54,15,52],[18,56,15,54],[18,59,15,57],[18,61,15,59],[18,64,15,62],[18,66,15,64],[18,69,15,67],[18,71,15,69],[18,74,15,72],[18,75,15,73],[19,4,17,2,"parse"],[19,9,17,7,"parse"],[19,10,17,8,"dateString"],[19,20,17,18],[19,22,17,20,"token"],[19,27,17,25],[19,29,17,27,"match"],[19,34,17,32],[19,36,17,34],[20,6,18,4],[20,12,18,10,"valueCallback"],[20,25,18,23],[20,28,18,27,"year"],[20,32,18,31],[20,37,18,37],[21,8,19,6,"year"],[21,12,19,10],[22,8,20,6,"isTwoDigitYear"],[22,22,20,20],[22,24,20,22,"token"],[22,29,20,27],[22,34,20,32],[23,6,21,4],[23,7,21,5],[23,8,21,6],[24,6,23,4],[24,14,23,12,"token"],[24,19,23,17],[25,8,24,6],[25,13,24,11],[25,16,24,14],[26,10,25,8],[26,17,25,15],[26,21,25,15,"mapValue"],[26,36,25,23],[26,38,25,24],[26,42,25,24,"parseNDigits"],[26,61,25,36],[26,63,25,37],[26,64,25,38],[26,66,25,40,"dateString"],[26,76,25,50],[26,77,25,51],[26,79,25,53,"valueCallback"],[26,92,25,66],[26,93,25,67],[27,8,26,6],[27,13,26,11],[27,17,26,15],[28,10,27,8],[28,17,27,15],[28,21,27,15,"mapValue"],[28,36,27,23],[28,38,28,10,"match"],[28,43,28,15],[28,44,28,16,"ordinalNumber"],[28,57,28,29],[28,58,28,30,"dateString"],[28,68,28,40],[28,70,28,42],[29,12,29,12,"unit"],[29,16,29,16],[29,18,29,18],[30,10,30,10],[30,11,30,11],[30,12,30,12],[30,14,31,10,"valueCallback"],[30,27,32,8],[30,28,32,9],[31,8,33,6],[32,10,34,8],[32,17,34,15],[32,21,34,15,"mapValue"],[32,36,34,23],[32,38,34,24],[32,42,34,24,"parseNDigits"],[32,61,34,36],[32,63,34,37,"token"],[32,68,34,42],[32,69,34,43,"length"],[32,75,34,49],[32,77,34,51,"dateString"],[32,87,34,61],[32,88,34,62],[32,90,34,64,"valueCallback"],[32,103,34,77],[32,104,34,78],[33,6,35,4],[34,4,36,2],[35,4,38,2,"validate"],[35,12,38,10,"validate"],[35,13,38,11,"_date"],[35,18,38,16],[35,20,38,18,"value"],[35,25,38,23],[35,27,38,25],[36,6,39,4],[36,13,39,11,"value"],[36,18,39,16],[36,19,39,17,"isTwoDigitYear"],[36,33,39,31],[36,37,39,35,"value"],[36,42,39,40],[36,43,39,41,"year"],[36,47,39,45],[36,50,39,48],[36,51,39,49],[37,4,40,2],[38,4,42,2,"set"],[38,7,42,5,"set"],[38,8,42,6,"date"],[38,12,42,10],[38,14,42,12,"flags"],[38,19,42,17],[38,21,42,19,"value"],[38,26,42,24],[38,28,42,26],[39,6,43,4],[39,12,43,10,"currentYear"],[39,23,43,21],[39,26,43,24,"date"],[39,30,43,28],[39,31,43,29,"getFullYear"],[39,42,43,40],[39,43,43,41],[39,44,43,42],[40,6,45,4],[40,10,45,8,"value"],[40,15,45,13],[40,16,45,14,"isTwoDigitYear"],[40,30,45,28],[40,32,45,30],[41,8,46,6],[41,14,46,12,"normalizedTwoDigitYear"],[41,36,46,34],[41,39,46,37],[41,43,46,37,"normalizeTwoDigitYear"],[41,71,46,58],[41,73,47,8,"value"],[41,78,47,13],[41,79,47,14,"year"],[41,83,47,18],[41,85,48,8,"currentYear"],[41,96,49,6],[41,97,49,7],[42,8,50,6,"date"],[42,12,50,10],[42,13,50,11,"setFullYear"],[42,24,50,22],[42,25,50,23,"normalizedTwoDigitYear"],[42,47,50,45],[42,49,50,47],[42,50,50,48],[42,52,50,50],[42,53,50,51],[42,54,50,52],[43,8,51,6,"date"],[43,12,51,10],[43,13,51,11,"setHours"],[43,21,51,19],[43,22,51,20],[43,23,51,21],[43,25,51,23],[43,26,51,24],[43,28,51,26],[43,29,51,27],[43,31,51,29],[43,32,51,30],[43,33,51,31],[44,8,52,6],[44,15,52,13,"date"],[44,19,52,17],[45,6,53,4],[46,6,55,4],[46,12,55,10,"year"],[46,16,55,14],[46,19,56,6],[46,21,56,8],[46,26,56,13],[46,30,56,17,"flags"],[46,35,56,22],[46,36,56,23],[46,40,56,27,"flags"],[46,45,56,32],[46,46,56,33,"era"],[46,49,56,36],[46,54,56,41],[46,55,56,42],[46,58,56,45,"value"],[46,63,56,50],[46,64,56,51,"year"],[46,68,56,55],[46,71,56,58],[46,72,56,59],[46,75,56,62,"value"],[46,80,56,67],[46,81,56,68,"year"],[46,85,56,72],[47,6,57,4,"date"],[47,10,57,8],[47,11,57,9,"setFullYear"],[47,22,57,20],[47,23,57,21,"year"],[47,27,57,25],[47,29,57,27],[47,30,57,28],[47,32,57,30],[47,33,57,31],[47,34,57,32],[48,6,58,4,"date"],[48,10,58,8],[48,11,58,9,"setHours"],[48,19,58,17],[48,20,58,18],[48,21,58,19],[48,23,58,21],[48,24,58,22],[48,26,58,24],[48,27,58,25],[48,29,58,27],[48,30,58,28],[48,31,58,29],[49,6,59,4],[49,13,59,11,"date"],[49,17,59,15],[50,4,60,2],[51,2,61,0],[52,2,61,1,"exports"],[52,9,61,1],[52,10,61,1,"YearParser"],[52,20,61,1],[52,23,61,1,"YearParser"],[52,33,61,1],[53,0,61,1],[53,3]],"functionMap":{"names":["<global>","YearParser","parse","valueCallback","validate","set"],"mappings":"AAA;OCY;ECI;0BCC;MDG;GDe;EGE;GHE;EIE;GJkB;CDC"}},"type":"js/module"}]}