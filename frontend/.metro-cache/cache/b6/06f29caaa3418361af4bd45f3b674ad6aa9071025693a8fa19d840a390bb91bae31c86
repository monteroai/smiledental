{"dependencies":[{"name":"../Parser.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"CIJslq/MUqKep4ImmeyUTywuBTk=","exportNames":["*"]}},{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":40},"end":{"line":3,"column":51,"index":91}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DayPeriodParser = void 0;\n  var _Parser = require(_dependencyMap[0], \"../Parser.js\");\n  var _utils = require(_dependencyMap[1], \"../utils.js\");\n  // in the morning, in the afternoon, in the evening, at night\n  class DayPeriodParser extends _Parser.Parser {\n    priority = 80;\n    parse(dateString, token, match) {\n      switch (token) {\n        case \"B\":\n        case \"BB\":\n        case \"BBB\":\n          return match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\"\n          }) || match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\"\n          });\n        case \"BBBBB\":\n          return match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\"\n          });\n        case \"BBBB\":\n        default:\n          return match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\"\n          }) || match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\"\n          }) || match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\"\n          });\n      }\n    }\n    set(date, _flags, value) {\n      date.setHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);\n      return date;\n    }\n    incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n  }\n  exports.DayPeriodParser = DayPeriodParser;\n});","lineCount":49,"map":[[6,2,1,0],[6,6,1,0,"_Parser"],[6,13,1,0],[6,16,1,0,"require"],[6,23,1,0],[6,24,1,0,"_dependencyMap"],[6,38,1,0],[7,2,3,0],[7,6,3,0,"_utils"],[7,12,3,0],[7,15,3,0,"require"],[7,22,3,0],[7,23,3,0,"_dependencyMap"],[7,37,3,0],[8,2,5,0],[9,2,6,7],[9,8,6,13,"DayPeriodParser"],[9,23,6,28],[9,32,6,37,"Parser"],[9,46,6,43],[9,47,6,44],[10,4,7,2,"priority"],[10,12,7,10],[10,15,7,13],[10,17,7,15],[11,4,9,2,"parse"],[11,9,9,7,"parse"],[11,10,9,8,"dateString"],[11,20,9,18],[11,22,9,20,"token"],[11,27,9,25],[11,29,9,27,"match"],[11,34,9,32],[11,36,9,34],[12,6,10,4],[12,14,10,12,"token"],[12,19,10,17],[13,8,11,6],[13,13,11,11],[13,16,11,14],[14,8,12,6],[14,13,12,11],[14,17,12,15],[15,8,13,6],[15,13,13,11],[15,18,13,16],[16,10,14,8],[16,17,15,10,"match"],[16,22,15,15],[16,23,15,16,"dayPeriod"],[16,32,15,25],[16,33,15,26,"dateString"],[16,43,15,36],[16,45,15,38],[17,12,16,12,"width"],[17,17,16,17],[17,19,16,19],[17,32,16,32],[18,12,17,12,"context"],[18,19,17,19],[18,21,17,21],[19,10,18,10],[19,11,18,11],[19,12,18,12],[19,16,19,10,"match"],[19,21,19,15],[19,22,19,16,"dayPeriod"],[19,31,19,25],[19,32,19,26,"dateString"],[19,42,19,36],[19,44,19,38],[20,12,20,12,"width"],[20,17,20,17],[20,19,20,19],[20,27,20,27],[21,12,21,12,"context"],[21,19,21,19],[21,21,21,21],[22,10,22,10],[22,11,22,11],[22,12,22,12],[23,8,25,6],[23,13,25,11],[23,20,25,18],[24,10,26,8],[24,17,26,15,"match"],[24,22,26,20],[24,23,26,21,"dayPeriod"],[24,32,26,30],[24,33,26,31,"dateString"],[24,43,26,41],[24,45,26,43],[25,12,27,10,"width"],[25,17,27,15],[25,19,27,17],[25,27,27,25],[26,12,28,10,"context"],[26,19,28,17],[26,21,28,19],[27,10,29,8],[27,11,29,9],[27,12,29,10],[28,8,30,6],[28,13,30,11],[28,19,30,17],[29,8,31,6],[30,10,32,8],[30,17,33,10,"match"],[30,22,33,15],[30,23,33,16,"dayPeriod"],[30,32,33,25],[30,33,33,26,"dateString"],[30,43,33,36],[30,45,33,38],[31,12,34,12,"width"],[31,17,34,17],[31,19,34,19],[31,25,34,25],[32,12,35,12,"context"],[32,19,35,19],[32,21,35,21],[33,10,36,10],[33,11,36,11],[33,12,36,12],[33,16,37,10,"match"],[33,21,37,15],[33,22,37,16,"dayPeriod"],[33,31,37,25],[33,32,37,26,"dateString"],[33,42,37,36],[33,44,37,38],[34,12,38,12,"width"],[34,17,38,17],[34,19,38,19],[34,32,38,32],[35,12,39,12,"context"],[35,19,39,19],[35,21,39,21],[36,10,40,10],[36,11,40,11],[36,12,40,12],[36,16,41,10,"match"],[36,21,41,15],[36,22,41,16,"dayPeriod"],[36,31,41,25],[36,32,41,26,"dateString"],[36,42,41,36],[36,44,41,38],[37,12,42,12,"width"],[37,17,42,17],[37,19,42,19],[37,27,42,27],[38,12,43,12,"context"],[38,19,43,19],[38,21,43,21],[39,10,44,10],[39,11,44,11],[39,12,44,12],[40,6,46,4],[41,4,47,2],[42,4,49,2,"set"],[42,7,49,5,"set"],[42,8,49,6,"date"],[42,12,49,10],[42,14,49,12,"_flags"],[42,20,49,18],[42,22,49,20,"value"],[42,27,49,25],[42,29,49,27],[43,6,50,4,"date"],[43,10,50,8],[43,11,50,9,"setHours"],[43,19,50,17],[43,20,50,18],[43,24,50,18,"dayPeriodEnumToHours"],[43,51,50,38],[43,53,50,39,"value"],[43,58,50,44],[43,59,50,45],[43,61,50,47],[43,62,50,48],[43,64,50,50],[43,65,50,51],[43,67,50,53],[43,68,50,54],[43,69,50,55],[44,6,51,4],[44,13,51,11,"date"],[44,17,51,15],[45,4,52,2],[46,4,54,2,"incompatibleTokens"],[46,22,54,20],[46,25,54,23],[46,26,54,24],[46,29,54,27],[46,31,54,29],[46,34,54,32],[46,36,54,34],[46,39,54,37],[46,41,54,39],[46,44,54,42],[46,45,54,43],[47,2,55,0],[48,2,55,1,"exports"],[48,9,55,1],[48,10,55,1,"DayPeriodParser"],[48,25,55,1],[48,28,55,1,"DayPeriodParser"],[48,43,55,1],[49,0,55,1],[49,3]],"functionMap":{"names":["<global>","DayPeriodParser","parse","set"],"mappings":"AAA;OCK;ECG;GDsC;EEE;GFG;CDG"}},"type":"js/module"}]}