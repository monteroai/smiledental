{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.areIntervalsOverlapping = areIntervalsOverlapping;\n  exports.default = void 0;\n  var _toDate = require(_dependencyMap[0], \"./toDate.js\");\n  /**\n   * The {@link areIntervalsOverlapping} function options.\n   */\n\n  /**\n   * @name areIntervalsOverlapping\n   * @category Interval Helpers\n   * @summary Is the given time interval overlapping with another time interval?\n   *\n   * @description\n   * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\n   *\n   * @param intervalLeft - The first interval to compare.\n   * @param intervalRight - The second interval to compare.\n   * @param options - The object with options\n   *\n   * @returns Whether the time intervals are overlapping\n   *\n   * @example\n   * // For overlapping time intervals:\n   * areIntervalsOverlapping(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n   * )\n   * //=> true\n   *\n   * @example\n   * // For non-overlapping time intervals:\n   * areIntervalsOverlapping(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n   * )\n   * //=> false\n   *\n   * @example\n   * // For adjacent time intervals:\n   * areIntervalsOverlapping(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n   * )\n   * //=> false\n   *\n   * @example\n   * // Using the inclusive option:\n   * areIntervalsOverlapping(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n   *   { inclusive: true }\n   * )\n   * //=> true\n   */\n  function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n    const [leftStartTime, leftEndTime] = [+(0, _toDate.toDate)(intervalLeft.start, options?.in), +(0, _toDate.toDate)(intervalLeft.end, options?.in)].sort((a, b) => a - b);\n    const [rightStartTime, rightEndTime] = [+(0, _toDate.toDate)(intervalRight.start, options?.in), +(0, _toDate.toDate)(intervalRight.end, options?.in)].sort((a, b) => a - b);\n    if (options?.inclusive) return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n    return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = areIntervalsOverlapping;\n});","lineCount":68,"map":[[7,2,1,0],[7,6,1,0,"_toDate"],[7,13,1,0],[7,16,1,0,"require"],[7,23,1,0],[7,24,1,0,"_dependencyMap"],[7,38,1,0],[8,2,3,0],[9,0,4,0],[10,0,5,0],[12,2,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,2,54,7],[59,11,54,16,"areIntervalsOverlapping"],[59,34,54,39,"areIntervalsOverlapping"],[59,35,54,40,"intervalLeft"],[59,47,54,52],[59,49,54,54,"intervalRight"],[59,62,54,67],[59,64,54,69,"options"],[59,71,54,76],[59,73,54,78],[60,4,55,2],[60,10,55,8],[60,11,55,9,"leftStartTime"],[60,24,55,22],[60,26,55,24,"leftEndTime"],[60,37,55,35],[60,38,55,36],[60,41,55,39],[60,42,56,4],[60,43,56,5],[60,47,56,5,"toDate"],[60,61,56,11],[60,63,56,12,"intervalLeft"],[60,75,56,24],[60,76,56,25,"start"],[60,81,56,30],[60,83,56,32,"options"],[60,90,56,39],[60,92,56,41,"in"],[60,94,56,43],[60,95,56,44],[60,97,57,4],[60,98,57,5],[60,102,57,5,"toDate"],[60,116,57,11],[60,118,57,12,"intervalLeft"],[60,130,57,24],[60,131,57,25,"end"],[60,134,57,28],[60,136,57,30,"options"],[60,143,57,37],[60,145,57,39,"in"],[60,147,57,41],[60,148,57,42],[60,149,58,3],[60,150,58,4,"sort"],[60,154,58,8],[60,155,58,9],[60,156,58,10,"a"],[60,157,58,11],[60,159,58,13,"b"],[60,160,58,14],[60,165,58,19,"a"],[60,166,58,20],[60,169,58,23,"b"],[60,170,58,24],[60,171,58,25],[61,4,59,2],[61,10,59,8],[61,11,59,9,"rightStartTime"],[61,25,59,23],[61,27,59,25,"rightEndTime"],[61,39,59,37],[61,40,59,38],[61,43,59,41],[61,44,60,4],[61,45,60,5],[61,49,60,5,"toDate"],[61,63,60,11],[61,65,60,12,"intervalRight"],[61,78,60,25],[61,79,60,26,"start"],[61,84,60,31],[61,86,60,33,"options"],[61,93,60,40],[61,95,60,42,"in"],[61,97,60,44],[61,98,60,45],[61,100,61,4],[61,101,61,5],[61,105,61,5,"toDate"],[61,119,61,11],[61,121,61,12,"intervalRight"],[61,134,61,25],[61,135,61,26,"end"],[61,138,61,29],[61,140,61,31,"options"],[61,147,61,38],[61,149,61,40,"in"],[61,151,61,42],[61,152,61,43],[61,153,62,3],[61,154,62,4,"sort"],[61,158,62,8],[61,159,62,9],[61,160,62,10,"a"],[61,161,62,11],[61,163,62,13,"b"],[61,164,62,14],[61,169,62,19,"a"],[61,170,62,20],[61,173,62,23,"b"],[61,174,62,24],[61,175,62,25],[62,4,64,2],[62,8,64,6,"options"],[62,15,64,13],[62,17,64,15,"inclusive"],[62,26,64,24],[62,28,65,4],[62,35,65,11,"leftStartTime"],[62,48,65,24],[62,52,65,28,"rightEndTime"],[62,64,65,40],[62,68,65,44,"rightStartTime"],[62,82,65,58],[62,86,65,62,"leftEndTime"],[62,97,65,73],[63,4,67,2],[63,11,67,9,"leftStartTime"],[63,24,67,22],[63,27,67,25,"rightEndTime"],[63,39,67,37],[63,43,67,41,"rightStartTime"],[63,57,67,55],[63,60,67,58,"leftEndTime"],[63,71,67,69],[64,2,68,0],[66,2,70,0],[67,2,70,0],[67,6,70,0,"_default"],[67,14,70,0],[67,17,70,0,"exports"],[67,24,70,0],[67,25,70,0,"default"],[67,32,70,0],[67,35,71,15,"areIntervalsOverlapping"],[67,58,71,38],[68,0,71,38],[68,3]],"functionMap":{"names":["<global>","areIntervalsOverlapping","sort$argument_0"],"mappings":"AAA;OCqD;SCI,eD;SCI,eD;CDM"}},"type":"js/module"}]}