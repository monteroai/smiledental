{"dependencies":[{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./closestIndexTo.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":53,"index":112}}],"key":"sTrjGiGNFj5RRzg0+tzT7Ho4+rs=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":113},"end":{"line":3,"column":51,"index":164}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.closestTo = closestTo;\n  exports.default = void 0;\n  var _normalizeDates = require(_dependencyMap[0], \"./_lib/normalizeDates.js\");\n  var _closestIndexTo = require(_dependencyMap[1], \"./closestIndexTo.js\");\n  var _constructFrom = require(_dependencyMap[2], \"./constructFrom.js\");\n  /**\n   * The {@link closestTo} function options.\n   */\n\n  /**\n   * The {@link closestTo} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name closestTo\n   * @category Common Helpers\n   * @summary Return a date from the array closest to the given date.\n   *\n   * @description\n   * Return a date from the array closest to the given date.\n   *\n   * @typeParam DateToCompare - Date to compare argument type.\n   * @typeParam DatesType - Dates array argument type.\n   * @typeParam Options - Options type.\n   *\n   * @param dateToCompare - The date to compare with\n   * @param dates - The array to search\n   *\n   * @returns The date from the array closest to the given date or undefined if no valid value is given\n   *\n   * @example\n   * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n   * const dateToCompare = new Date(2015, 8, 6)\n   * const result = closestTo(dateToCompare, [\n   *   new Date(2000, 0, 1),\n   *   new Date(2030, 0, 1)\n   * ])\n   * //=> Tue Jan 01 2030 00:00:00\n   */\n  function closestTo(dateToCompare, dates, options) {\n    const [dateToCompare_, ...dates_] = (0, _normalizeDates.normalizeDates)(options?.in, dateToCompare, ...dates);\n    const index = (0, _closestIndexTo.closestIndexTo)(dateToCompare_, dates_);\n    if (typeof index === \"number\" && isNaN(index)) return (0, _constructFrom.constructFrom)(dateToCompare_, NaN);\n    if (index !== undefined) return dates_[index];\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = closestTo;\n});","lineCount":56,"map":[[7,2,1,0],[7,6,1,0,"_normalizeDates"],[7,21,1,0],[7,24,1,0,"require"],[7,31,1,0],[7,32,1,0,"_dependencyMap"],[7,46,1,0],[8,2,2,0],[8,6,2,0,"_closestIndexTo"],[8,21,2,0],[8,24,2,0,"require"],[8,31,2,0],[8,32,2,0,"_dependencyMap"],[8,46,2,0],[9,2,3,0],[9,6,3,0,"_constructFrom"],[9,20,3,0],[9,23,3,0,"require"],[9,30,3,0],[9,31,3,0,"_dependencyMap"],[9,45,3,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[14,2,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[21,2,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,2,42,7],[47,11,42,16,"closestTo"],[47,20,42,25,"closestTo"],[47,21,42,26,"dateToCompare"],[47,34,42,39],[47,36,42,41,"dates"],[47,41,42,46],[47,43,42,48,"options"],[47,50,42,55],[47,52,42,57],[48,4,43,2],[48,10,43,8],[48,11,43,9,"dateToCompare_"],[48,25,43,23],[48,27,43,25],[48,30,43,28,"dates_"],[48,36,43,34],[48,37,43,35],[48,40,43,38],[48,44,43,38,"normalizeDates"],[48,74,43,52],[48,76,44,4,"options"],[48,83,44,11],[48,85,44,13,"in"],[48,87,44,15],[48,89,45,4,"dateToCompare"],[48,102,45,17],[48,104,46,4],[48,107,46,7,"dates"],[48,112,47,2],[48,113,47,3],[49,4,49,2],[49,10,49,8,"index"],[49,15,49,13],[49,18,49,16],[49,22,49,16,"closestIndexTo"],[49,52,49,30],[49,54,49,31,"dateToCompare_"],[49,68,49,45],[49,70,49,47,"dates_"],[49,76,49,53],[49,77,49,54],[50,4,51,2],[50,8,51,6],[50,15,51,13,"index"],[50,20,51,18],[50,25,51,23],[50,33,51,31],[50,37,51,35,"isNaN"],[50,42,51,40],[50,43,51,41,"index"],[50,48,51,46],[50,49,51,47],[50,51,52,4],[50,58,52,11],[50,62,52,11,"constructFrom"],[50,90,52,24],[50,92,52,25,"dateToCompare_"],[50,106,52,39],[50,108,52,41,"NaN"],[50,111,52,44],[50,112,52,45],[51,4,54,2],[51,8,54,6,"index"],[51,13,54,11],[51,18,54,16,"undefined"],[51,27,54,25],[51,29,54,27],[51,36,54,34,"dates_"],[51,42,54,40],[51,43,54,41,"index"],[51,48,54,46],[51,49,54,47],[52,2,55,0],[54,2,57,0],[55,2,57,0],[55,6,57,0,"_default"],[55,14,57,0],[55,17,57,0,"exports"],[55,24,57,0],[55,25,57,0,"default"],[55,32,57,0],[55,35,58,15,"closestTo"],[55,44,58,24],[56,0,58,24],[56,3]],"functionMap":{"names":["<global>","closestTo"],"mappings":"AAA;OCyC;CDa"}},"type":"js/module"}]}